* Basic setup
** frame size
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src
** no tool bar
  #+begin_src emacs-lisp
    (tool-bar-mode -1)
  #+end_src
** desktop mode
keeps track of all the files you've opened and remembers them
  #+begin_src emacs-lisp
    (load-library "desktop")
    (desktop-save-mode 1)
  #+end_src
** server-start
turn current emacs process into a server that another client can connect to
#+begin_src emacs-lisp
  (require 'server)
  (or (server-running-p)
      (server-start))
#+end_src
** emacs daemon
#+begin_src sh
  # forks an emacs process in the background
  emacs --daemon

  # OR run as a foreground process and see the output of emacs (can be helpful to diagnose errors)
  emacs --fg-daemon
#+end_src
** savehist
#+begin_src emacs-lisp
  (savehist-mode 1)

  (setq savehist-additional-variables '(register-alist kill-ring))
#+end_src
** change "yes or no?" to "y or n?"
  #+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  #+end_src
** subword mode
treat camel-case symbols as separate (i.e. M-f and M-b will move across parts of a camel-cased symbol)
  #+begin_src emacs-lisp
    (global-subword-mode 1)
  #+end_src
** delete text when it's marked by typing
  #+begin_src emacs-lisp
  (delete-selection-mode t)
  #+end_src
** minibuffer
I just want to use counsel-yank-pop in the minibuffer
#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
#+end_src
* Aesthetics & Other Enhancements
** theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-acario-dark t)
    ;; (load-theme 'doom-molokai t)
    )
  ;; doom-monokai-classic - very similar to doom-molokai
#+end_src
** what face
#+begin_src emacs-lisp
  (defun what-face (pos)
  "what-face to determine the face at the current point"
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
                    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))
#+end_src
** modeline
#+begin_src emacs-lisp
  (use-package mood-line
    :ensure t
    :config
    (mood-line-mode)
    :after
    all-the-icons

    ;; Use pretty Fira Code-compatible glyphs:
    ;;   ● myModifiedFile.js  Replace×3                 + main  JavaScript  → Issues: 2
    :custom
    (mood-line-glyph-alist mood-line-glyphs-fira-code))
#+end_src
** [[https://github.com/domtronn/all-the-icons.el/][all-the-icons]]
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p)
    ;; :commands all-the-icons-install-fonts
    ;; :config
    ;; (unless (find-font (font-spec :name "all-the-icons"))
    ;;   (all-the-icons-install-fonts t))
    ;; (unless (member "all-the-icons" (font-family-list))
    ;;   (all-the-icons-install-fonts t))
    ;; (all-the-icons-install-fonts)
    )
#+end_src
** line stuff
*** add and highlight line numbers
  #+begin_src emacs-lisp
    ;; allows line-number-current-line face to work
    (setq-default display-line-numbers t)
    ;; but global-linum-mode has to be turned off
    (global-linum-mode 0)

    (setq-default mode-line-front-space
                  (append mode-line-front-space '((:eval (format "/%s" (line-number-at-pos (point-max)))))))
  #+end_src
*** wrap words for every line
  #+begin_src emacs-lisp
    (global-visual-line-mode 1)
    (setq visual-line-fringe-indicators '(bottom-left-angle bottom-right-angle))

    (if (bound-and-true-p global-visual-line-mode)
        (progn
          (global-set-key (kbd "C-e") 'end-of-visual-line)
          (global-set-key (kbd "s-e") 'end-of-line)
          (global-set-key (kbd "C-a") 'beginning-of-visual-line)
          (global-set-key (kbd "s-a") 'beginning-of-line))
      (progn
        (global-set-key (kbd "C-e") 'end-of-line)
        (global-set-key (kbd "s-e") 'end-of-visual-line)
        (global-set-key (kbd "C-a") 'beginning-of-line)
        (global-set-key (kbd "s-a") 'beginning-of-visual-line)))
  #+end_src
*** [[https://github.com/alpaker/fill-column-indicator][fill-column-indicator]]
show 80-character vertical marker

*TODO:* take out and replace with native [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Displaying-Boundaries.html][display-fill-column-indicator-mode]]
  #+begin_src emacs-lisp
    (use-package fill-column-indicator
      :ensure t
      :config
      (setq fci-rule-character-color "#202020")
      (setq fci-rule-width 1)
      ;; :hook
      ;; ((prog-mode) . fci-mode)
      )
  #+end_src
**** [[https://github.com/company-mode/company-mode/issues/180#issuecomment-55047120][fix incompatibility with company]]
#+begin_src emacs-lisp
  (defvar-local company-fci-mode-on-p nil)

  (defun company-turn-off-fci (&rest ignore)
    (when (boundp 'fci-mode)
      (setq company-fci-mode-on-p fci-mode)
      (when fci-mode (fci-mode -1))))

  (defun company-maybe-turn-on-fci (&rest ignore)
    (when company-fci-mode-on-p (fci-mode 1)))

  (add-hook 'company-completion-started-hook 'company-turn-off-fci)
  (add-hook 'company-completion-finished-hook 'company-maybe-turn-on-fci)
  (add-hook 'company-completion-cancelled-hook 'company-maybe-turn-on-fci)
#+end_src
*** clean up any accidental trailing whitespace upon save (except for the final newline)
  #+begin_src emacs-lisp
    (add-hook 'before-save-hook 'whitespace-cleanup)
    ;; have to disable few items in whitespace-style
    ;; according to https://www.emacswiki.org/emacs/SmartTabs
    (setq whitespace-style
       '(face trailing tabs spaces lines newline empty indentation space-before-tab space-mark tab-mark newline-mark))

    (setq require-final-newline t)
  #+end_src
** indentation
*** aesthetics
**** [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]]
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :defer t
    :custom
    (highlight-indent-guides-method 'character)
    (highlight-indent-guides-responsive 'top)
    (highlight-indent-guides-delay 0)
    (highlight-indent-guides-auto-set-faces t)
    :hook
    ((yaml-mode nxml-mode) . highlight-indent-guides-mode))
#+end_src
*** functionality
*Overall strategy*: infer-indentation-style for a mode-hook. If spaces > tabs, then turn tabs OFF, else turn tabs ON. If tabs are turned ON, then smart-tabs will take over (indent-tabs-mode must be non-nil for smart-tabs to work according to the [[https://www.emacswiki.org/emacs/SmartTabs][SmartTabs wiki]])
  #+begin_src emacs-lisp
    (setq-default indent-tabs-mode nil)

    ;; infer indentation style of file
    (defun infer-indentation-style ()
      ;; if our source file uses tabs, we use tabs, if spaces spaces, and if
      ;; neither, we use the current indent-tabs-mode
      (let ((space-count (how-many "^  " (point-min) (point-max)))
            (tab-count (how-many "^\t" (point-min) (point-max))))
        (if (> space-count tab-count) (setq indent-tabs-mode nil))
        (if (> tab-count space-count) (setq indent-tabs-mode t))))
#+end_src
**** [[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode]]
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :hook
    (prog-mode . aggressive-indent-mode))
#+end_src
**** [[https://www.emacswiki.org/emacs/SmartTabs][smart-tabs-mode]]
#+begin_src emacs-lisp
  (use-package smart-tabs-mode
    :ensure t
    :config
    (autoload 'smart-tabs-mode "smart-tabs-mode"
      "Intelligently indent with tabs, align with spaces!")
    (autoload 'smart-tabs-mode-enable "smart-tabs-mode")
    (autoload 'smart-tabs-advice "smart-tabs-mode")
    (autoload 'smart-tabs-insinuate "smart-tabs-mode")
    (smart-tabs-insinuate 'c 'c++ 'java 'javascript 'python
                          'ruby 'nxml))
#+end_src
**** indent entire buffer
  #+begin_src emacs-lisp
  (defun indent-buffer ()
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max) nil)))
  (global-set-key (kbd "C-t") 'indent-buffer)
  #+end_src
** delimiters
*** show parentheses matching
  #+begin_src emacs-lisp
  (show-paren-mode 1)
  #+end_src
*** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]
  #+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook
    ((prog-mode emacs-lisp-mode lisp-mode) . rainbow-delimiters-mode))
  #+end_src
*** [[https://www.emacswiki.org/emacs/ParEdit][ParEdit]]
[[http://danmidwood.com/content/2014/11/21/animated-paredit.html][nice animated guide to Paredit]]
[[https://www.emacswiki.org/emacs/PareditCheatsheet][PareditCheatsheet]]
  #+begin_src emacs-lisp
    (use-package paredit
      :ensure t
      :init
      (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
      :config
      (eval-after-load "paredit.el" '(require 'paredit-menu))
      :hook
      ((emacs-lisp-mode eval-expression-minibuffer-setup lisp-mode lisp-interaction-mode scheme-mode) . enable-paredit-mode))
  #+end_src
*** electric pair mode
electric for everything that ParEdit doesn't cover
  #+begin_src emacs-lisp
    (electric-pair-mode 1)
    (setq electric-pair-preserve-balance nil)

    ;; Disable pairs when entering minibuffer
    (add-hook 'minibuffer-setup-hook (lambda () (electric-pair-mode 0)))
    ;; Renable pairs when existing minibuffer
    (add-hook 'minibuffer-exit-hook (lambda () (electric-pair-mode 1)))
  #+end_src
** highlighting
*** rainbow-mode
highlight text representing color codes
  #+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
  #+end_src
*** [[https://github.com/gennad/auto-highlight-symbol][auto-highlight-symbol]]
  #+begin_src emacs-lisp
  (use-package auto-highlight-symbol
    :ensure t
    :custom
    (ahs-idle-interval 1.0)
    (ahs-default-range 'ahs-range-whole-buffer)
    :config
    (global-auto-highlight-symbol-mode)
    :hook
    ((prog-mode) . auto-highlight-symbol-mode))

  (global-set-key (kbd "C-x p") 'ahs-backward)
  (global-set-key (kbd "C-x n") 'ahs-forward)
  #+end_src
*** [[https://github.com/magnars/expand-region.el][expand-region]]
  #+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind
    ("C-=" . er/expand-region))
  #+end_src
** hiding code
[[https://www.emacswiki.org/emacs/HideShow][HideShow]] - for folding blocks of code

The original ~toggle-fold~ function I found wasn't actually working the way I wanted it to (the cursor had to be in a particular position to show already-hidden code). I tried using the ~toggle-selective-display~ and ~toggle-hiding~ functions from the above wiki but to no avail. I even tried cherry picking some of the source code (~hs-find-block-beginning~, ~hs-already-hidden-p~) out of hideshow.el but no dice. In the end, I decided to just roll with my own hide-block and show-block functions... oh well
  #+begin_src emacs-lisp
    (add-hook 'prog-mode-hook #'hs-minor-mode)

    (defun my-hs-hide-block ()
      "move to end of line, then hs-hide-block"
      (interactive)
      (save-excursion
        (end-of-line)
        (hs-hide-block)))
    (global-set-key (kbd "C-c h s h") 'my-hs-hide-block)

    (defun my-hs-show-block ()
      "move to beginning of line, then hs-show-block"
      (interactive)
      (save-excursion
        (beginning-of-line)
        (hs-show-block)))
    (global-set-key (kbd "C-c h s s") 'my-hs-show-block)
  #+end_src
** [[https://github.com/editorconfig/editorconfig-emacs][editorconfig]]

https://editorconfig.org/

maintain consistent coding styles between devs working on the same project
  #+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
  #+end_src
** regex
*** [[https://github.com/benma/visual-regexp-steroids.el/][visual-regexp-steroids]]
#+begin_src emacs-lisp
  (use-package visual-regexp-steroids
    :ensure t
    :bind
    ("C-c r e r" . vr/replace)
    ("C-c r e q" . vr/query-replace)
    ("C-c r e m" . vr/mc-mark)
    :init
    ;; if the files are not already in the load path
    (add-to-list 'load-path "/Users/ckelly/.emacs.d/elpa/visual-regexp-20210502.2019/")
    (add-to-list 'load-path "/Users/ckelly/.emacs.d/elpa/visual-regexp-steroids-20170222.253/")
    :config
    ;; to use visual-regexp-steroids's isearch instead of the built-in regexp isearch, also include the following lines:
    (define-key esc-map (kbd "C-c r e s b") 'vr/isearch-backward)
    (define-key esc-map (kbd "C-c r e s f") 'vr/isearch-forward))
#+end_src
*** my-query-regexp-replace
Kept getting the following error when running query-replace-regexp: "Match data clobbered by buffer modification hooks"
Check out these links for more info: [[https://emacs.stackexchange.com/questions/47147/regex-replace-sporadic-match-data-clobbered-by-buffer-modification-hooks][stackexchange #1]], [[https://emacs.stackexchange.com/questions/38800/match-data-clobbered-by-buffer-modification-hooks][stackexchange #2]], [[https://gnu.emacs.bug.narkive.com/AfLtJyrL/bug-41445-26-3-query-replace-triggers-match-data-clobbered-by][gnu.emacs.bug]]
#+begin_src emacs-lisp
  ;; (defun my-query-replace-regexp ()
  ;;   (interactive)
  ;;   (let ((after-change-functions nil)) ; empty when executing this func
  ;;     (call-interactively 'query-replace-regexp)))
  ;; (global-set-key (kbd "C-M-%") 'my-query-replace-regexp)
#+end_src
*** [[https://github.com/joddie/pcre2el][pcre2el]]
use perl-based regexp and convert between Emacs syntax to PCRE and vice versa
#+begin_src emacs-lisp
  (use-package pcre2el
    :ensure t
    :defer t
    :hook ((prog-mode) . rxt-mode))
#+end_src
** miscellaneous enhancements
*** [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :defer t
    :bind
    (("C-S-<mouse-1>" . mc/add-cursor-on-click))
    :custom
    (mc/always-repeat-command t)
    (mc--executing-command-for-fake-cursor nil)
    :config
    (eval-after-load "multiple-cursors"
      '(let ((prefix "C-c m c ")
            (bindings #'(("e" . mc/edit-lines)
                         ("n" . mc/mark-next-like-this-symbol)
                         ("p" . mc/mark-previous-like-this-symbol)
                         ("a" . mc/mark-all-like-this)
                         ("N" . mc/unmark-next-like-this)
                         ("P" . mc/unmark-previous-like-this)
                         ("b" . mc/cycle-backward)
                         ("f" . mc/cycle-forward)
                         ("^" . mc/edit-beginnings-of-lines)
                         ("$" . mc/edit-ends-of-lines)
                         ("h" . mc-hide-unmatched-lines-mode))))
        (dolist (binding bindings)
          (global-set-key (kbd (concat prefix (car binding)))
                          (cdr binding)))))
    )
#+end_src
*** [[https://github.com/magit/magit][magit]]
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :custom
    (magit-show-long-lines-warning nil))

  ;; (defun my-magit-stage-and-commit (message)
  ;;   (interactive "sCommit Message: ")
  ;;   (let ((magit-commit-show-diff nil)
  ;;         (magit-commit-ask-to-stage nil)
  ;;         (msg message))
  ;;     ;; (call-interactively 'magit-stage-modified)
  ;;     ;; (call-interactively 'magit-commit)
  ;;     (magit-stage t)
  ;;     (magit-commit-create)
  ;;     (magit-commit-message-buffer)
  ;;     (insert (format "%S" msg))))

  (defun my-magit-stage-and-commit ()
    (interactive)
    (let ((magit-commit-show-diff nil)
          (magit-commit-ask-to-stage nil))
      ;; (call-interactively 'magit-stage-modified)
      ;; (call-interactively 'magit-commit)
      (magit-stage t)
      (magit-commit-create)))

  (defun my-magit-stage-all-and-commit ()
    (interactive)
    (let ((magit-commit-show-diff nil)
          (magit-commit-ask-to-stage nil))
      (magit-stage-modified)
      (magit-commit-create)))
#+end_src
*** [[https://github.com/justbur/emacs-which-key][which-key]]
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1.0))
#+end_src
*** [[https://www.emacswiki.org/emacs/WhichFuncMode][which-function-mode]]
#+begin_src emacs-lisp
   (eval-after-load "which-func"
        '(setq which-func-modes '(prog-mode org-mode)))
#+end_src
*** [[https://github.com/chubin/cheat.sh][cheat-sh]]
#+begin_src emacs-lisp
  (use-package cheat-sh
    :ensure t)
#+end_src
*** custom functions to do stuff
**** save *all* files w/o asking y-or-n
#+begin_src emacs-lisp
  (defun save-all-buffers-no-confirm ()
    "Save ALL buffers that are un-saved without asking y-or-n."
    (interactive)
    (save-some-buffers t nil)
    (message "All files saved"))
  (global-set-key (kbd "C-x S") 'save-all-buffers-no-confirm)
#+end_src
**** turn off stuff to speed things up
#+begin_src emacs-lisp
  (setq sluggish-minor-modes '(auto-highlight-symbol-mode
                               highlight-indent-guides-mode
                               flycheck-mode
                               font-lock-mode))

  (defun turn-off-sluggish-minor-modes ()
    "Disable minor modes that could make Emacs slow when working with large files."
    (interactive)
    (dolist (mode sluggish-minor-modes)
      (funcall mode 0)))
  (global-set-key (kbd "C-c t o 0") 'turn-off-sluggish-minor-modes)

  (defun turn-on-sluggish-minor-modes ()
    "Enable minor modes that could make Emacs slow when working with large files."
    (interactive)
    (dolist (mode sluggish-minor-modes)
      (funcall mode)))
  (global-set-key (kbd "C-c t o 1") 'turn-on-sluggish-minor-modes)

  (defun toggle-sluggish-minor-modes ()
    "Turn on/off minor modes that could make Emacs slow when working with large files."
    (interactive)
    (dolist (mode sluggish-minor-modes)
      (if (symbol-value mode)
          (funcall mode 0)
        (funcall mode))))


#+end_src
**** commenting
#+begin_src emacs-lisp
  (defun comment-from-curr-line-to-line-n (n)
    "Run 'comment-or-uncomment-region' from current line to a given line N."
    (interactive "nComment to line : ")
    (save-excursion
      (let ((line-diff (- n (line-number-at-pos))))
        (if (>= line-diff 0)
            (comment-line (+ 1 line-diff))
          (forward-line 1)
          (comment-line (+ (- 1) line-diff)))
        (save-buffer))))

  (global-set-key (kbd "C-c ;") 'comment-from-curr-line-to-line-n)
#+end_src
* Buffer and Window stuff
** ibuffer
#+begin_src emacs-lisp
  (setq ibuffer-saved-filter-groups
        ' (("default"
            ("C"
             (or (name . "\\.c$")))
            ("Java"
             (or (name . "\\.java$")))
            ("Ruby"
             (or (mode . ruby-mode)
                 (mode . enh-ruby-mode)
                 (name . "\\.rb$")
                 ))
            ("js"
             (or (mode . js2-mode)
                 (mode . javascript-mode)
                 (name . "\\.js")))
            ("html"
             (or (name . "\\.html$")
                 (mode . html-mode)
                 (mode . handlebars-mode)
                 ))
            ("css"
             (or (mode . css-mode)
                 (name . "\\.css$")))
            ("xml"
             (or (mode . nxml-mode)
                 (name . "\\.xml$")))
            ("yaml"
             (or (mode . yaml-mode)
                 (name . "\\.ya?ml$")))
            )))
  (setq ibuffer-formats
        '((mark modified read-only " "
                (name 40 40 :left :elide) " "
                (mode 15 15 :left :elide) " " filename-and-process)
          (mark " " (name 16 -1) " " filename)))
  (put 'narrow-to-region 'disabled nil)
  (add-hook 'ibuffer-hook (lambda()
                            (local-set-key "" 'other-window)))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src
** switch-to-last-buffer
  #+begin_src emacs-lisp
  (defun switch-to-last-buffer ()
    (interactive)
    (switch-to-buffer nil))
  (global-set-key (kbd "C-S-b") 'switch-to-last-buffer)
  #+end_src
** focus on newly created windows
both stolen from [[https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org#following-window-splits][UncleDaves's config]]
  #+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
  #+end_src
** always kill current buffer
  #+begin_src emacs-lisp
  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
  #+end_src
** revert buffer no confirm
#+begin_src emacs-lisp
(defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))
(global-set-key (kbd "s-u") 'revert-buffer-no-confirm)
#+end_src
** rename-file-and-buffer
source: http://steve.yegge.googlepages.com/my-dot-emacs-file
  #+begin_src emacs-lisp
  (defun rename-file-and-buffer(new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "New name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (if (get-buffer new-name)
            (message "A buffer named '%s' already exists!" new-name)
          (progn
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil))))))
  (global-set-key (kbd "C-c r n") 'rename-file-and-buffer)
  #+end_src
** global window/workspace saving functions
  #+begin_src emacs-lisp
    (defvar g_workspace (current-window-configuration))

    (defun save-workspace()
      (setq g_workspace (current-window-configuration))
      (princ "workspace saved"))

    (defun save-or-restore-workspace()
      (interactive)
      (if (> (count-windows) 1)
          (save-workspace)
        (set-window-configuration g_workspace)))
    (global-set-key (kbd "C-x C-w") 'save-or-restore-workspace)

    (setq backup-directory-alist `((".*" . "~/.emacs.d/.saves")))
    (setq auto-save-file-name-transforms
          `((".*" ,"~/.emacs.d/.saves" t)))
  #+end_src
** don't open new window in emacs
#+begin_src emacs-lisp
  ;; "might" make it so that new windows don't pop up each time
  ;; you open something with Emacs
  (setq ns-pop-up-frames nil)
#+end_src
* Org Mode
** org related vars, defuns, key bindings, etc.
#+begin_src emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'reorganize-frameasfd)
  (add-hook 'org-mode-hook 'org-indent-mode)

  (defun reload-config ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r c") 'reload-config)

  (global-set-key (kbd "C-c '") 'org-edit-src-code)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((java . t)))
#+end_src
** org-structure-template-alist
#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp\n")
               '("j" . "src java\n"))
#+end_src
** org-bullets
better looking bullets for .org files
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src
* Navigation
** basic navigation
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-o") 'other-window)
    (global-set-key (kbd "C-l") 'goto-line-begin)
    (global-set-key (kbd "C-S-l") 'goto-line-end)
    (global-set-key (kbd "C-x l") 'recenter-top-bottom)

    (defun goto-line-begin (n)
      "Jump to beginning (where text starts) of line N."
      (interactive "nGo to BEGIN of line : ")
      (goto-line n)
      (back-to-indentation))

    (defun goto-line-end (n)
      "Jump to very end of line N regardless of 'global-visual-line-mode'."
      (interactive "nGo to END of line : ")
      (goto-line n)
      (if (bound-and-true-p global-visual-line-mode)
          (end-of-line)
        (end-of-visual-line)))
  #+end_src
** [[https://github.com/dimitri/switch-window][switch-window]]
This was nice for awhile, but it eventually kept getting in the way and making frames unusable. Maybe some day I'll return to it
switch windows quickly when > 3 windows
#+begin_src emacs-lisp
  ;; (use-package switch-window
  ;;   :ensure t
  ;;   :config
  ;;   (setq switch-window-input-style 'minibuffer)
  ;;   (setq switch-window-increase 4)
  ;;   (setq switch-window-threshold 3)
  ;;   (setq switch-window-shortcut-style 'qwerty)
  ;;   (setq switch-window-qwerty-shortcuts
  ;;         '("a" "s" "d" "f" "g" "h" "j" "k" "l" "q" "w" "e" "r"))
  ;;   :bind
  ;;   ([remap other-window] . switch-window))
#+end_src
** [[https://github.com/abo-abo/avy][avy]]
quickly jump to char or line
TODO: avy-goto-char-timer + symbol-at-point = could make it easier to jump to a non-highlighted part of a frame
  #+begin_src emacs-lisp
    (use-package avy
      :ensure t
      :config
      ;; (setq avy-keys-alist
      ;;       `((avy-goto-char-timer . ,(number-sequence ?a ?z))))
      (setq avy-keys-alist nil)
      (setq avy-background t)

      ;; every letter but the letters I use for avy-actions below
      (setq avy-keys '(?a ?b ?c ?d ?e ?f ?g ?h
                          ?j ?l ?m ?o ?q ?r ?s
                          ?u ?v))

      (defun avy-show-dispatch-help ()
        (let* ((len (length "avy-action-"))
               (fw (frame-width))
               (raw-strings (mapcar
                             (lambda (x)
                               (format "%2s → %-19s"
                                       (propertize
                                        (char-to-string (car x))
                                        'face 'aw-key-face)
                                       (substring (symbol-name (cdr x)) len)))
                             avy-dispatch-alist))
               (max-len (1+ (apply #'max (mapcar #'length raw-strings))))
               (strings-len (length raw-strings))
               (per-row (floor fw max-len))
               display-strings)
          (cl-loop for string in raw-strings
                   for N from 1 to strings-len do
                   (push (concat string " ") display-strings)
                   (when (= (mod N per-row) 0) (push "\n" display-strings)))
          (message "%s" (apply #'concat (nreverse display-strings)))))


      ;; Kill text
      (defun avy-action-kill-whole-line (pt)
        (save-excursion
          (goto-char pt)
          (kill-whole-line))
        (select-window
         (cdr
          (ring-ref avy-ring 0)))
        t)

      (setf (alist-get ?k avy-dispatch-alist) 'avy-action-kill-stay
            (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line)

      ;; Copy text
      (defun avy-action-copy-whole-line (pt)
        (save-excursion
          (goto-char pt)
          (kill-new
           (buffer-substring
            (point-at-bol)
            (point-at-eol))))
        (select-window
         (cdr
          (ring-ref avy-ring 0)))
        t)

      (setf (alist-get ?w avy-dispatch-alist) 'avy-action-copy
            (alist-get ?W avy-dispatch-alist) 'avy-action-copy-whole-line)

      ;; Yank text
      (defun avy-action-yank-whole-line (pt)
        (avy-action-copy-whole-line pt)
        (save-excursion (yank))
        t)

      (defun avy-action-yank-whole-line-above (pt)
        (avy-action-copy-whole-line pt)
        (save-excursion
          (insert-line-above)
          (yank)
          (indent-for-tab-command))
        t)

      (defun avy-action-yank-whole-line-below (pt)
        (avy-action-copy-whole-line pt)
        (save-excursion
          (insert-line-below)
          (yank)
          (indent-for-tab-command))
        t)

      (setf (alist-get ?y avy-dispatch-alist) 'avy-action-yank
            (alist-get ?Y avy-dispatch-alist) 'avy-action-yank-whole-line
            (alist-get ?P avy-dispatch-alist) 'avy-action-yank-whole-line-above
            (alist-get ?N avy-dispatch-alist) 'avy-action-yank-whole-line-below)

      ;; Transpose/Move text
      (defun avy-action-teleport-whole-line (pt)
        (avy-action-kill-whole-line pt)
        (save-excursion (yank)) t)

      (setf (alist-get ?t avy-dispatch-alist) 'avy-action-teleport
            (alist-get ?T avy-dispatch-alist) 'avy-action-teleport-whole-line)

      :bind
      ("C-c f" . avy-goto-char-timer)
      ("C-c a l" . avy-goto-line))
  #+end_src
* Scrolling
#+begin_src emacs-lisp
  ;; scrolling
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time

  (defun gcm-scroll-up ()
    (interactive)
    (scroll-down 7))
  (global-set-key (kbd "M-p") 'gcm-scroll-up)

  (defun gcm-scroll-down ()
    (interactive)
    (scroll-up 7))
  (global-set-key (kbd "M-n") 'gcm-scroll-down)
#+end_src

* Killing, Yanking, Moving lines, etc.
** killing
#+begin_src emacs-lisp
  (defun kill-thing-at-point (thing)
    "Kill the `thing-at-point' for the specified kind of THING."
    (let ((bounds (bounds-of-thing-at-point thing)))
      (if bounds
          (kill-region (car bounds) (cdr bounds))
        (error "No %s at point" thing))
      (if (buffer-file-name)
          (save-buffer))
      (message "whole %s killed" thing)))
#+end_src
*** kill whole word
#+begin_src emacs-lisp
  (defun kill-whole-word-at-point ()
    "Kill the word at point."
    (interactive)
    (global-superword-mode 1)
    (kill-thing-at-point 'word)
    (global-subword-mode 1))
  (global-set-key (kbd "C-c k w") 'kill-whole-word-at-point)
#+end_src
*** kill whole line
  #+begin_src emacs-lisp
  (global-set-key (kbd "C-c k l") 'kill-whole-line)
  #+end_src
*** kill ring stuff
**** increase kill ring size
#+begin_src emacs-lisp
  (setq kill-ring-max 100)
#+end_src
**** don’t add a string to kill-ring if it duplicates the last one
#+begin_src emacs-lisp
  (setq kill-do-not-save-duplicates t)
#+end_src
** yanking
#+begin_src emacs-lisp
  (defun copy-whole-word ()
    "Copies a word without regard for cursor position."
    (interactive)
    (save-buffer)
    (global-superword-mode 1)
    (save-excursion
      (forward-char 1)
      (backward-word)
      (kill-word 1)
      (yank))
    (global-subword-mode 1)
    (save-buffer)
    (message "whole word copied"))
  (global-set-key (kbd "C-c y w") 'copy-whole-word)

  (defun copy-whole-line ()
    "Copies a line without regard for cursor position."
    (interactive)
    (kill-new
     (buffer-substring
      (point-at-bol)
      (point-at-eol)))
    (message "whole line copied"))
  (global-set-key (kbd "C-c y l") 'copy-whole-line)

  (defun insert-line-below ()
    "Insert an empty line below the current line."
    (interactive)
    (end-of-line)
    (newline))

  (defun insert-line-above ()
    "Insert an empty line above the current line."
    (interactive)
    (end-of-line 0)
    (newline))

  (defun copy-and-yank-line-below ()
    "Copies a line and inserts it down one line while keeping your cursor
     position constant"
    (interactive)
    (save-excursion
      (copy-whole-line)
      (insert-line-below)
      (yank)
      (indent-for-tab-command)))
  (global-set-key (kbd "C-c y n") 'copy-and-yank-line-below)

  (defun copy-and-yank-line-above ()
    "Copies a line and inserts it down one line while keeping your cursor
     position constant"
    (interactive)
    (save-excursion
      (copy-whole-line)
      (insert-line-above)
      (yank)
      (indent-for-tab-command)))
  (global-set-key (kbd "C-c y p") 'copy-and-yank-line-above)
#+end_src
** moving lines
  #+begin_src emacs-lisp
  (defun move-line (n)
    "Move the current line up or down by N lines."
    (interactive "p")
    (beginning-of-line)
    (setq col (current-column))
    (setq start (point))
    (end-of-line) (forward-char) (setq end (point))
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (insert line-text)
      ;; restore point to original column in moved line
      (forward-line -1)
      (forward-char col)))

  (defun move-line-up (n)
    "Move the current line up by N lines."
    (interactive "p")
    (move-line (if (null n) -1 (- n))))
  (global-set-key (kbd "M-<up>") 'move-line-up)

  (defun move-line-down (n)
    "Move the current line down by N lines."
    (interactive "p")
    (move-line (if (null n) 1 n)))
  (global-set-key (kbd "M-<down>") 'move-line-down)

  #+end_src
** moving regions
#+begin_src emacs-lisp
  (defun move-region (start end n)
    "Move the current region up or down by N lines."
    (interactive "r\np")
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (let ((start (point)))
        (insert line-text)
        (setq deactivate-mark nil)
        (set-mark start))))

  (defun move-region-up (start end n)
    "Move the current line up by N lines."
    (interactive "r\np")
    (move-region start end (if (null n) -1 (- n))))
  (global-set-key (kbd "C-M-<up>") 'move-region-up)

  (defun move-region-down (start end n)
    "Move the current line down by N lines."
    (interactive "r\np")
    (move-region start end (if (null n) 1 n)))
  (global-set-key (kbd "C-M-<down>") 'move-region-down)
#+end_src
* Vertico, Consult, Embark, Orderless, Marginalia, and co.
** vertico
Copy/pasted from [[https://kristofferbalintona.me/posts/202202211546/][here]]
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
                ;; ("<tab>" . vertico-insert) ; Set manually otherwise setting `vertico-quick-insert' overrides this
                ;; ("<escape>" . minibuffer-keyboard-quit)
                ("?" . minibuffer-completion-help)
                ("C-M-n" . vertico-next-group)
                ("C-M-p" . vertico-previous-group)
                ;; Multiform toggles
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word)
                ("RET" . vertico-directory-enter)
                ;; ("C-i" . vertico-quick-insert)
                ;; ("C-o" . vertico-quick-exit)
                ;; ("M-o" . kb/vertico-quick-embark)
                ;; ("M-G" . vertico-multiform-grid)
                ;; ("M-F" . vertico-multiform-flat)
                ;; ("M-R" . vertico-multiform-reverse)
                ;; ("M-U" . vertico-multiform-unobtrusive)
                ;; ("C-l" . kb/vertico-multiform-flat-toggle)
                )
    :hook
    ;; Needed with `read-file-name-completion-ignore-case'.
    ;; See these links:
    ;; - https://github.com/minad/vertico/issues/341
    ;; - https://debbugs.gnu.org/cgi/bugreport.cgi?bug=60264
    ;;
    ;; Regardless of it fixing an actual bug, I prefer
    ;; this behavior.
    ((rfn-eshadow-update-overlay . vertico-directory-tidy) ; Clean up file path when typing
     (minibuffer-setup . vertico-repeat-save) ; Make sure vertico state is saved
     )
    :custom
    (vertico-count 20)
    (vertico-resize t)
    (vertico-cycle t)
    :init
    (vertico-mode 1)
    :config
    ;; Extensions
    (vertico-multiform-mode))
#+end_src
*** consult-projectile
#+begin_src emacs-lisp
  (use-package consult-projectile
    :ensure t
    :after (consult projectile))
#+end_src
** consult
#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :after vertico
    :bind (;; Common stuff
           ("C-c c i" . consult-info)
           ("C-c c o" . consult-outline)
           ("C-c c m i" . consult-imenu)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ;; yank-pop
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; Searching and grep-ing
           ("C-s" . consult-line)
           ("C-c c l m" . consult-line-multi)
           ("C-c c g" . consult-git-grep)
           ("C-c c r" . consult-ripgrep)
           :map consult-narrow-map
           ("?" . consult-narrow-help)
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history)                 ;; orig. previous-matching-history-element
           ;; Remaps
           ([remap switch-to-buffer]              . consult-buffer)
           ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
           ([remap switch-to-buffer-other-frame]  . consult-buffer-other-frame)
           ([remap project-switch-to-buffer]      . consult-project-buffer)
           ([remap yank-pop]                      . consult-yank-pop)
           ([remap bookmark-jump]                 . consult-bookmark)
           ([remap repeat-complex-command]        . consult-complex-command)
           ;; Remaps for `Info-mode'.
           ([remap Info-search] . consult-info)
           )
    :custom
    (consult-find-args (concat "find . -not ( "
                               "-path */.git* -prune "
                               "-or -path */.cache* -prune )"))
    (consult-narrow-key "<")
    (consult-line-numbers-widen t)
    :config
    (defun consult-git-grep-thing-at-point ()
      (interactive)
      (consult-git-grep nil (thing-at-point 'symbol)))
    (global-set-key (kbd "C-c c G") 'consult-git-grep-thing-at-point)

    (defun consult-line-thing-at-point ()
      (interactive)
      (consult-line (thing-at-point 'symbol)))
    (global-set-key (kbd "C-M-s") 'consult-line-thing-at-point)

    )
#+end_src
** embark
#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :bind
    (:map global-map
          ("C-c e a" . embark-act)
          ("C-c e d" . embark-dwim)
          ;; ("C-," . prot-embark-act-no-quit)
          :map minibuffer-local-map
          ("M-e" . embark-act)
          ;; ("C-," . prot-embark-act-no-quit)
          )
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    ;; (add-to-list 'display-buffer-alist
    ;;              '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
    ;;                nil
    ;;                (window-parameters (mode-line-format . none))))
    (defun embark-which-key-indicator ()
      "An embark indicator that displays keymaps using which-key.
  The which-key help message will show the type and value of the
  current target followed by an ellipsis if there are further
  targets."
      (lambda (&optional keymap targets prefix)
        (if (null keymap)
            (which-key--hide-popup-ignore-command)
          (which-key--show-keymap
           (if (eq (plist-get (car targets) :type) 'embark-become)
               "Become"
             (format "Act on %s '%s'%s"
                     (plist-get (car targets) :type)
                     (embark--truncate-target (plist-get (car targets) :target))
                     (if (cdr targets) "…" "")))
           (if prefix
               (pcase (lookup-key keymap prefix 'accept-default)
                 ((and (pred keymapp) km) km)
                 (_ (key-binding prefix 'accept-default)))
             keymap)
           nil nil t (lambda (binding)
                       (not (string-suffix-p "-argument" (cdr binding))))))))

    ;; TODO: figure out how this works
    ;; (defun prot-embark-act-no-quit ()
    ;;   "Call `embark-act' but do not quit after the action."
    ;;   (interactive)
    ;;   (let ((embark-quit-after-action nil))
    ;;     (call-interactively #'embark-act)))

    :custom
    (embark-mixed-indicator-delay 0.5)
    (embark-indicators
     '(embark-which-key-indicator
       embark-highlight-indicator
       embark-isearch-highlight-indicator))
    )
#+end_src
*** embark-consult
#+begin_src emacs-lisp
  (use-package embark-consult
    :ensure t
    :after (embark consult))
#+end_src
** orderless
Copy/pasted from [[https://kristofferbalintona.me/posts/202202211546/#orderless][here]] and [[https://codeberg.org/vifon/emacs-config/src/branch/master/emacs.d/lisp/20-completion-engine.el][here]]
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :after vertico
    :custom
    ;; Use the built-in "partial-completion" style to complete
    ;; file inputs such as "/e/ni/co.nix" into
    ;; "/etc/nixos/configuration.nix".  The "basic" style is
    ;; needed to support the hostname completion in the TRAMP
    ;; inputs such as "/sshx:HOSTNAME".
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles basic partial-completion))))

    (orderless-component-separator 'orderless-escapable-split-on-space) ; Use backslash for literal space

    (orderless-matching-styles
     '(orderless-literal
       orderless-prefixes
       orderless-initialism
       orderless-regexp
       ;; orderless-flex ; too fuzzy
       ))

    (completion-styles '(orderless partial-completion basic))

    (orderless-style-dispatchers
     '(prot-orderless-literal-dispatcher
       prot-orderless-strict-initialism-dispatcher
       prot-orderless-flex-dispatcher)
     )
    :init
    ;; Stolen from https://kristofferbalintona.me/posts/202202211546/#orderless
    (defun prot-orderless-literal-dispatcher (pattern _index _total)
      "Literal style dispatcher using the equals sign as a suffix.
    It matches PATTERN _INDEX and _TOTAL according to how Orderless
    parses its input."
      (when (string-suffix-p "=" pattern)
        `(orderless-literal . ,(substring pattern 0 -1))))

    (defun prot-orderless-strict-initialism-dispatcher (pattern _index _total)
      "Leading initialism  dispatcher using the comma suffix.
    It matches PATTERN _INDEX and _TOTAL according to how Orderless
    parses its input."
      (when (string-suffix-p "," pattern)
        `(orderless-strict-initialism . ,(substring pattern 0 -1))))

    (defun prot-orderless-flex-dispatcher (pattern _index _total)
      "Flex  dispatcher using the tilde suffix.
    It matches PATTERN _INDEX and _TOTAL according to how Orderless
    parses its input."
      (when (string-suffix-p "." pattern)
        `(orderless-flex . ,(substring pattern 0 -1))))
    )
#+end_src
** marginalia
TODO: Load marginalia mode automagically. I have no idea why, but marginalia-mode will not load no matter what I try
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :after vertico
    :bind (:map minibuffer-local-map
                ("M-c" . marginalia-cycle))
    :custom
    (marginalia-align 'right)
    :init
    (marginalia-mode)
    )
#+end_src
** [[https://github.com/DarwinAwardWinner/amx][amx]]
alternative interface for M-x in Emacs
#+begin_src emacs-lisp
  (use-package amx
    :ensure t
    :after vertico
    :custom
    (amx-backend 'auto)
    (amx-save-file "~/.emacs.d/amx-items")
    :config
    (amx-mode 1)
    ;; https://github.com/DarwinAwardWinner/amx#speeding-up-amx
    (setq amx-ignored-command-matchers nil)
    ;; amx was ruining eval-expression. Hopefully, this removes this annoyance.
    ;; opposite of this: https://github.com/DarwinAwardWinner/amx/blob/master/amx.el#L1323
    (cl-loop for fun in '(load eval-last-sexp eval-buffer eval-region eval-expression autoload-do-load)
             do (advice-remove fun #'amx-post-eval-force-update)))
#+end_src
** wgrep
#+begin_src emacs-lisp
  (use-package wgrep
    :ensure t)
#+end_src
** rg
#+begin_src emacs-lisp
  (use-package rg
    :ensure t)
#+end_src
* [[https://github.com/bbatsov/projectile][Projectile]]
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'auto)
    ;; (defun my-projectile-replace ()
    ;;   (interactive)
    ;;   (let ((after-change-functions nil)) ; empty when executing this func
    ;;     (call-interactively 'projectile-replace)))
    ;; (global-set-key (kbd "C-c p r") 'my-projectile-replace)
    )
#+end_src
* Shell stuff
#+begin_src emacs-lisp
  (defun my-send-string-to-shell (s)
    (let* ((buffer-name "*shell*")
           (process (get-buffer-process buffer-name)))
      (with-current-buffer buffer-name
        (unless process
          (error "No process in %s" buffer-name))
        (save-some-buffers)
        ;;(comint-clear-buffer)
        (goto-char (process-mark process))
        (insert s)
        (comint-send-input nil t))))

  (defun open-shell-if-not-open ()
    (when (not (get-buffer "*shell*"))
      (shell))
    (switch-to-buffer "*shell*"))
#+end_src
* Languages
** C
#+begin_src emacs-lisp
  (defun my-c-mode-common-hook ()
    (infer-indentation-style)
    (setq c-basic-offset 4))

  (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
#+end_src
*** [[https://github.com/randomphrase/company-c-headers][company-c-headers]]
Can't use ~/usr/include~ dir for C headers location due to Mac OS's System Integrity Protection
#+begin_src emacs-lisp
  (use-package company-c-headers
    :after company
    :config
    (push 'company-c-headers company-backends)
    (add-to-list 'company-c-headers-path-system "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include"))
#+end_src
*** compilation functions
#+begin_src emacs-lisp
  ;; custom compile functions
  ;; TODO: make one-button function that compiles everything (w/o using a makefile)
  ;; and if things compile correctly, then put me in that buffer
  ;; otherwise don't run and allow to navigate to next-error
  (defun my-insto-compile()
    (interactive)
    (let* ((c-file (buffer-file-name (current-buffer)))
           (buffer-name "*shell*")
           (process (get-buffer-process buffer-name)))
      (with-current-buffer buffer-name
        (unless process
          (error "No process in %s" buffer-name))
        (save-some-buffers)
        (goto-char (process-mark process))
        (insert (concat "gcc -Werror " c-file " && ./a.out"))
        (comint-send-input nil t)
        (switch-to-buffer "*shell*"))))

  (defun my-compile-v2()
    (interactive)
    (let* ((c-file (buffer-file-name (current-buffer)))
           (c-file-basename (file-name-base c-file))
           (compile-string (concat "gcc -Werror " c-file " -o " c-file-basename " && ./" c-file-basename)))
      (open-shell-if-not-open)
      (my-send-string-to-shell compile-string)))

  (defun my-compile-v1()
    (interactive)
    (let* ((c-file (buffer-file-name (current-buffer)))
           (c-file-basename (file-name-base c-file))
           (compile-string (concat "gcc -Werror " c-file " -o " c-file-basename " && ./" c-file-basename))
           )
      (compile compile-string t)
      (switch-to-buffer "*compilation*")))
  (global-set-key (kbd "<f6>") 'my-compile-v1)

  (defun my-compilation-hook()
    ;; comp mode, stop overriding my other window keybinding please
    (local-set-key (kbd "C-o") 'other-window))

  (add-hook 'compilation-mode-hook 'my-compilation-hook)
#+end_src
** Java
#+begin_src emacs-lisp
  ;; (use-package lsp-java
  ;;   :ensure t
  ;;   :defer t
  ;;   :custom
  ;;   (lsp-java-maven-download-sources t)
  ;;   (lsp-java-configuration-maven-user-settings "/Users/ckelly/.m2/settings.xml")
  ;;   (lsp-java-jdt-download-url "https://download.eclipse.org/jdtls/milestones/1.25.0/dt-language-server-1.25.0-202306291518.tar.gz")
  ;;   ;; try glancing at https://github.com/mopemope/meghanada-emacs/blob/master/meghanada.el#L509
  ;;   ;; to figure out if we can pass something similar to ckelly's JVM (lsp-java-vmargs)
  ;;   ;; "-Dmy.maven.local.repository=%s"
  ;;   ;; also checkout the lsp-java setup of: https://gitlab.com/buildfunthings/emacs-config/-/blob/master/loader.org
  ;;   :after lsp
  ;;   :hook
  ;;   (java-mode . lsp)
  ;;   :config
  ;;   ((add-hook 'java-mode-hook 'lsp))
  ;;   :if (executable-find "mvn")
  ;;   )
#+end_src
** Ruby
[[https://wikemacs.org/wiki/Ruby][WikEmacs]] does not have a bad starting point for Ruby
*** [[https://github.com/zenspider/enhanced-ruby-mode][enh-ruby-mode]]
#+begin_src emacs-lisp
  (use-package enh-ruby-mode
    :ensure t
    :mode
    (("\\.rb$" . enh-ruby-mode)
     ("\\.erb$" . enh-ruby-mode)
     ("\\.rake$" . enh-ruby-mode)
     ("Rakefile$" . enh-ruby-mode)
     ("\\.gemspec$" . enh-ruby-mode)
     ("\\.ru$" . enh-ruby-mode)
     ("Gemfile$" . enh-ruby-mode))
    :config
    (defun my-ruby-mode-hook ()
      "Setup ruby modes for me."
      (if window-system
          (linum-mode))
      (infer-indentation-style)
      (add-hook 'enh-ruby-mode-hook 'ac-robe-setup)
      (add-hook 'enh-ruby-mode-hook 'ruby-end-mode)
      (add-hook 'enh-ruby-mode-hook 'robe-mode)
      (add-hook 'enh-ruby-mode-hook 'flymake-ruby-load))

    (add-hook 'enh-ruby-mode-hook 'my-ruby-mode-hook))
#+end_src
*** [[https://github.com/nonsequitur/inf-ruby][inf-ruby]]
REPL buffer connected to a Ruby subprocess
#+begin_src emacs-lisp
  (use-package inf-ruby
    :ensure t
    :bind
    ("C-c r i r" . inf-ruby))
#+end_src
*** [[https://github.com/senny/rvm.el][rvm]]
#+begin_src emacs-lisp
  (use-package rvm
    :ensure t
    :config
    (rvm-use-default))
#+end_src
*** [[https://github.com/dgutov/robe][robe]]
#+begin_src emacs-lisp
  (use-package robe
    :ensure t)

  (defadvice inf-ruby-console-auto (before activate-rvm-for-robe activate)
    (rvm-activate-corresponding-ruby))
  (global-set-key (kbd "C-c r a") 'rvm-activate-corresponding-ruby)

    ;; (push 'company-robe company-backends)
#+end_src
*** [[https://github.com/rejeep/ruby-end.el][ruby-end]]
#+begin_src emacs-lisp
  (use-package ruby-end
    :ensure t)
#+end_src
*** [[https://github.com/purcell/flymake-ruby][flymake-ruby]]
#+begin_src emacs-lisp
  (use-package flymake-ruby
    :ensure t)
#+end_src
*** [[https://github.com/michaelklishin/cucumber.el][feature-mode]]
#+begin_src emacs-lisp
  (use-package feature-mode
    :ensure t
    :mode
    (("\.feature$" . feature-mode))
    :config
    (setq freature-use-rvm t) ;; Tell Cucumber to use RVM
    (setq feature-cucumber-command "cucumber {options} {feature}"))
#+end_src
*** [[https://github.com/pezra/rspec-mode][rspec-mode]]
#+begin_src emacs-lisp
  (use-package rspec-mode
    :ensure t
    :config
    ;; use rspec instead of rake spec
    (setq rspec-use-rake-when-possible nil)
    ;; Scroll to the first test failure
    (setq compilation-scroll-output 'first-error))
#+end_src
** Javascript (and web-mode)
*** [[https://github.com/mooz/js2-mode][js2-mode]]
#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode
    (("\\.js\\'" . js2-mode))
    :config
    ;; better imenu
    (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
    ;; searches the current files parent directories for the
    ;; node_modules/.bin/ directory and adds it to the buffer local exec-path
    (defun get-npm-exec-path()
      "prepend the most local node package manager executable path to the current exec path and return it"
      (let* ((root (locate-dominating-file
                    (or (buffer-file-name) default-directory)
                    "node_modules")))
        (cons (concat root "/node_modules/.bin") exec-path)))
    (defun my-js-mode-hook()
      (set (make-local-variable 'exec-path) (get-npm-exec-path))
      (infer-indentation-style)
      (add-hook 'js2-mode-hook (lambda ()
                                 (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
      (add-hook 'js2-mode-hook 'my-js-mode-hook)))
#+end_src
*** [[https://github.com/NicolasPetton/xref-js2][xref-js2]]
#+begin_src emacs-lisp
  (use-package xref-js2
    :ensure t
    :config
    ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
    ;; unbind it.
    (define-key js-mode-map (kbd "M-.") nil))
#+end_src
*** [[https://github.com/codesuki/eslint-fix][eslint-fix]]
#+begin_src emacs-lisp
  ;; eslint
  (use-package eslint-fix
    :ensure t)
  ;; (eval-after-load 'js2-mode
  ;;   '(add-hook 'js2-mode-hook (lambda () (add-hook 'after-save-hook 'eslint-fix nil t))))
#+end_src
*** [[https://github.com/fxbois/web-mode][web-mode]]
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :mode
    (("\\.phtml\\'" . web-mode)
     ("\\.tpl\\.php\\'" . web-mode)
     ("\\.[agj]sp\\'" . web-mode)
     ("\\.as[cp]x\\'" . web-mode)
     ("\\.jsx\\'" . web-mode)
     ("\\.erb\\'" . web-mode)
     ("\\.mustache\\'" . web-mode)
     ("\\.hbs\\'" . web-mode)
     ("\\.djhtml\\'" . web-mode)
     ("\\.html?\\'" . web-mode))
    :config
    (setq web-mode-enable-current-element-highlight t)
    ;; (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-indentation t)
    (setq web-mode-markup-indent-offset 4)
    ;; (add-hook 'web-mode-hook (lambda () (add-hook 'after-save-hook web-mode-buffer-indent)))

    (defvar web-mode-electric-pairs '((?\< . ?\>)) "helpful pairing for web mode")
    (defun web-mode-add-electric-pairs ()
      (setq-local electric-pair-pairs (append electric-pair-pairs web-mode-electric-pairs))
      (setq-local electric-pair-text-pairs electric-pair-pairs))
    (add-hook 'web-mode-hook 'web-mode-add-electric-pairs))
#+END_SRC
** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :hook (json-mode . flycheck-mode)
    :custom (js-indent-level 2))
#+end_src
*** [[https://github.com/gongo/json-reformat][json-reformat]]
#+begin_src emacs-lisp
  (use-package json-reformat
    :ensure t)
#+end_src
*** JSON editing
#+begin_src emacs-lisp
  (defun json-to-single-line-insert-whitespace (beg end)
    "Collapse prettified json in region between BEG and END to a single line"
    (interactive "r")
    (if (use-region-p)
        (save-excursion
          (save-restriction
            (narrow-to-region beg end)
            (goto-char (point-min))
            (while (re-search-forward "[[:space:]\n]+" nil t)
              (replace-match " "))))
      (print "This function operates on a region")))

  (defun json-to-single-line-insert-newline-char (beg end)
    "Collapse prettified json in region between BEG and END to a single line"
    (interactive "r")
    (if (use-region-p)
        (save-excursion
          (save-restriction
            (narrow-to-region beg end)
            (goto-char (point-min))
            (while (re-search-forward "[\n]+" nil t)
              (replace-match "\r"))))
      (print "This function operates on a region")))

#+end_src
** Groovy
(mostly for Jenkinsfiles)
#+begin_src emacs-lisp
  (use-package groovy-mode
    :ensure t
    :mode
    (("\\.groovy$" . groovy-mode))
    :config
    (add-hook 'groovy-mode-hook
              (lambda ()
                (c-set-offset 'label 2))
              (infer-indentation-style)))
#+end_src
** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode
      (("\\.ya?ml$" . yaml-mode)))
#+end_src
** xml
#+begin_src emacs-lisp
  (setq nxml-child-indent 4)
#+end_src
* [[https://emacs-lsp.github.io/lsp-mode/][LSP]]
copied a lot of stuff from [[https://github.com/MatthewZMD/.emacs.d#lsp][this config]] and [[https://github.com/andreyorst/dotfiles/tree/master/.config/emacs#lsp-mode][this config]]
#+begin_src emacs-lisp
  ;; (use-package lsp-mode
  ;;   :ensure t
  ;;   :defer t
  ;;   :custom
  ;;   (lsp-keymap-prefix "C-c l")
  ;;   (lsp-enable-which-key-integration t)
  ;;   (lsp-auto-guess-root nil)
  ;;   (lsp-eldoc-hook nil)
  ;;   (lsp-enable-indentation nil)
  ;;   (lsp-enable-folding nil)
  ;;   (lsp-enable-links nil)
  ;;   (lsp-prefer-flymake nil) ;; Use flycheck instead of flymake
  ;;   (lsp-enable-file-watchers nil)
  ;;   (read-process-output-max (* 1024 1024)) ;; 1mb --> from https://emacs-lsp.github.io/lsp-mode/page/performance/
  ;;   (lsp-completion-provider :capf)
  ;;   (lsp-restart 'auto-restart)
  ;;   (lsp-log-io t)
  ;;   (lsp-print-performance t)
  ;;   :hook
  ;;   ((java-mode c-mode c++-mode) . lsp-deferred)
  ;;   :config
  ;;   (setq lsp-intelephense-multi-root nil) ; don't scan unnecessary projects
  ;;   ;; (with-eval-after-load 'lsp-intelephense
  ;;   ;; (setf (lsp--client-multi-root (gethash 'iph lsp-clients)) nil))
  ;;   ;; (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
  ;;   ;; fixes error msg: "entered--Lisp error: (error "Invalid image type ‘svg’")
  ;;   ;; bcus of treemacs
  ;;   (add-to-list 'image-types 'svg)
  ;;   ;; ;; disable key bindings that collide with gcm-scroll up/down
  ;;   ;; (progn (define-key lsp-mode-map (kbd "M-n") nil)
  ;;   ;;        (define-key lsp-mode-map (kbd "M-p") nil))
  ;;   ;; (defun overwrite-local-lsp-key-bindings()
  ;;   ;;   (local-set-key (kbd "M-n") 'gcm-scroll-down)
  ;;   ;;   (local-set-key (kbd "M-p") 'gcm-scroll-up))

  ;;   ;; (add-hook 'lsp-mode-hook 'overwrite-local-lsp-key-bindings)
  ;;   )
#+end_src
* [[https://github.com/joaotavora/eglot][Eglot]]
helpful doc - https://joaotavora.github.io/eglot/
** TODO get working on work laptop (does work on personal laptop)
*** can't import basic stuff (e.g. 'java.util') on work laptop; doesn't work on basic .java files
*** ':java :home' setting is different between personal and work laptop when starting eglot
** switched from lsp because eglot is more minimalist and works more OOTB
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t)

  ;; c and c++
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'c++-mode-hook 'eglot-ensure)

  ;; java
  ;;
  ;; copied from https://github.com/joaotavora/eglot/pull/864#issuecomment-1065031496
  ;; this restores a couple of functions that the eglot maintainers took out: eglot--eclipse-jdt-contact and eglot-eclipse-jdt.
  ;; (see commit: https://github.com/joaotavora/eglot/commit/de3004fb52bc87eb7088894dbc4047101004e366)
  ;; These functions help start up and configure Eclipse JDT (in case one can't use the simpler 'jdtls' script).
  ;; START COPY
  (with-eval-after-load 'eglot
    ;; Tell Eglot to use a specific class to handle java-mode files
    ;; (add-to-list 'eglot-server-programs '(java-mode . eglot--eclipse-jdt-contact))

    (defun eglot--eclipse-jdt-contact (interactive)
      "Return cons (CLASS . ARGS) for connecting to Eclipse JDT.
  If INTERACTIVE, prompt user for details."
      (cl-labels
          ((is-the-jar
            (path)
            (and (string-match-p
                  "org\\.eclipse\\.equinox\\.launcher_.*\\.jar$"
                  (file-name-nondirectory path))
                 (file-exists-p path))))
        (let* ((envpath (or (getenv "PATH") path-separator))
               (cp-jar (cl-find-if #'is-the-jar (split-string envpath path-separator)))
               (jar cp-jar)
               (dir
                (cond
                 (jar (file-name-as-directory
                       (expand-file-name ".." (file-name-directory jar))))
                 (interactive
                  (expand-file-name
                   (read-directory-name
                    (concat "Path to eclipse.jdt.ls directory (could not"
                            " find it in PATH): ")
                    nil nil t)))
                 (t (error "Could not find eclipse.jdt.ls jar in PATH"))))
               (repodir
                (concat dir
                        "org.eclipse.jdt.ls.product/target/repository/"))
               (repodir (if (file-directory-p repodir) repodir dir))
               (config
                (concat
                 repodir
                 (cond
                  ((string= system-type "darwin") "config_mac")
                  ((string= system-type "windows-nt") "config_win")
                  (t "config_linux"))))
               (workspace
                (expand-file-name (md5 (project-root (eglot--current-project)))
                                  (locate-user-emacs-file
                                   "eglot-eclipse-jdt-cache"))))
          (unless jar
            (setq jar
                  (cl-find-if #'is-the-jar
                              (directory-files (concat repodir "plugins") t))))
          (unless (and jar (file-exists-p jar) (file-directory-p config))
            (error "Could not find required eclipse.jdt.ls files (build required?)"))
          (when (and interactive (not cp-jar)
                     (y-or-n-p (concat "Add path to the server program "
                                       "to PATH environment variable?")))
            (setenv "PATH" (concat (getenv "PATH") path-separator jar)))
          (unless (file-directory-p workspace)
            (make-directory workspace t))
          (cons 'eglot-eclipse-jdt
                (list (executable-find "java")
                      "-Declipse.application=org.eclipse.jdt.ls.core.id1"
                      "-Dosgi.bundles.defaultStartLevel=4"
                      "-Declipse.product=org.eclipse.jdt.ls.core.product"
                      "-Dmy.maven.local.repository=/Users/ckelly/.m2/repository/"
                      "--add-modules=ALL-SYSTEM"
                      "-jar" jar
                      "-configuration" config
                      "-data" workspace)))))

    ;; Define said class and its methods
    (defclass eglot-eclipse-jdt (eglot-lsp-server) ()
      :documentation "Eclipse's Java Development Tools Language Server.")

    (cl-defmethod eglot-initialization-options ((server eglot-eclipse-jdt))
      "Passes through required JDT initialization options."
      `(:workspaceFolders
        [,@(cl-delete-duplicates
            (mapcar #'eglot--path-to-uri
                    (let* ((root (project-root (eglot--project server))))
                      (cons root
                            (mapcar
                             #'file-name-directory
                             (append
                              (file-expand-wildcards (concat root "*/pom.xml"))
                              (file-expand-wildcards (concat root "*/build.gradle"))
                              (file-expand-wildcards (concat root "*/.project")))))))
            :test #'string=)]
        ,@(if-let ((home (or (getenv "JAVA_HOME")
                             (ignore-errors
                               (expand-file-name
                                ".."
                                (file-name-directory
                                 (file-chase-links (executable-find "javac"))))))))
              `(:settings (:java (:home ,home)))
            (ignore (eglot--warn "JAVA_HOME env var not set")))))

    (cl-defmethod eglot-execute-command
      ((_server eglot-eclipse-jdt) (_cmd (eql java.apply.workspaceEdit)) arguments)
      "Eclipse JDT breaks spec and replies with edits as arguments."
      (mapc #'eglot--apply-workspace-edit arguments)))
  ;; END COPY


  ;; Note: check out how this Java Language Server sets up its externalDependencies
  ;; https://github.com/georgewfraser/java-language-server#settings
  ;; This server apparently picks up your externalDependencies you put in your ~/.m2

  ;; This is also copied/pasted from the eglot repo: https://github.com/joaotavora/eglot/issues/176#issuecomment-445021620
  ;; It just says, "Go to the eglot-server-program list and set the value (corresponding to the java-mode key) to this eclipse jar
  ;; (by overriding the eglot--eclipse-jdt-contact function... I think).
  ;; You might ask, "Why did we copy/paste the giant couple functions above, particularly eglot--eclipse-jdt-contact, if all we're
  ;; doing is changing a key-value pair?" Answer: Idk. Idk what unwind-protect was doing/not doing, so I copied/pasted everything bcus
  ;; I'm desperate to get something to work.

  ;; also in PATH in .bashrc
  ;; (defconst my-eglot-eclipse-jdt-home "/Users/connorkelly/.emacs.d/.cache/lsp/eclipse.jdt.ls/plugins/org.eclipse.equinox.launcher_1.6.400.v20210924-0641.jar") ;; personal
  ;; (defconst my-eglot-eclipse-jdt-home "/Users/ckelly/.emacs.d/.cache/lsp/eclipse.jdt.ls/plugins/org.eclipse.equinox.launcher_1.6.400.v20210924-0641.jar") ;; work
  (defconst my-eglot-eclipse-jdt-home "/Users/connorkelly/.emacs.d/.cache/lsp/eclipse.jdt.ls/bin/jdtls") ;; use bin/jdtls if eglot directly asks, "Can't find jdtls program in path. Enter program to execute:..."


  (defun my-eglot-eclipse-jdt-contact (interactive)
    "Contact with the jdt server input INTERACTIVE."
    (let ((envpath (getenv "PATH")))
      (setenv "PATH" (concat envpath ":" my-eglot-eclipse-jdt-home))
      (unwind-protect (eglot--eclipse-jdt-contact nil)
        (setenv "PATH" envpath))))

  ;; THIS IS FINICKY
  ;; (setcdr (assq (cons 'java-mode 'java-ts-mode) eglot-server-programs) #'my-eglot-eclipse-jdt-contact)

  ;; (add-hook 'java-mode-hook 'eglot-ensure)
  ;; (remove-hook 'java-mode-hook 'eglot-ensure)
#+end_src
* Company
set [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion-Styles.html][completion-style]]
TODO: checkout [[https://www.emacswiki.org/emacs/Icicles_-_Completion_Methods_and_Styles][Icicles - Completion Methods and Styles]]
#+begin_src emacs-lisp
  (add-to-list 'completion-styles-alist '(flex substring))
#+end_src
mostly taken from [[https://github.com/andreyorst/dotfiles/tree/master/.config/emacs][this config]]
#+begin_src emacs-lisp
  (use-package company
    :bind (:map company-active-map
                ("TAB" . company-complete-common-or-cycle)
                ("<tab>" . company-complete-common-or-cycle)
                ("C-d" . company-show-doc-buffer)
                ("M-." . company-show-location)
                ("C-." . company-complete))
    :hook
    (after-init . global-company-mode)
    :custom
    (company-require-match 'never)
    (company-minimum-prefix-length 2)
    (company-tooltip-align-annotations t)
    (company-show-numbers t)
    (company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                         company-preview-frontend
                         company-echo-metadata-frontend))
    (company-backends '(company-clang
                        company-capf
                        (company-dabbrev-code company-gtags company-etags
                                              company-keywords)
                        company-cmake
                        company-dabbrev
                        company-semantic
                        company-elisp
                        company-files))
    :config
    ;; use numbers to insert company match
    ;; stolen from https://github.com/abo-abo/oremacs/blob/9c1dd95f52bd6f65313c50c1a85c8bacdde74581/modes/ora-company.el
  ;;   (defun ora-company-number ()
  ;;     "Forward to `company-complete-number'.
  ;; Unless the number is potentially part of the candidate.
  ;; In that case, insert the number."
  ;;     (interactive)
  ;;     (let* ((k (this-command-keys))
  ;;            (re (concat "^" company-prefix k)))
  ;;       (if (or (cl-find-if (lambda (s) (string-match re s))
  ;;                           company-candidates)
  ;;               (> (string-to-number k)
  ;;                  (length company-candidates))
  ;;               (looking-back "[0-9]+\\.[0-9]*" (line-beginning-position)))
  ;;           (self-insert-command 1)
  ;;         (company-complete-number
  ;;          (if (equal k "0")
  ;;              10
  ;;            (string-to-number k))))))

  ;;   (defun ora--company-good-prefix-p (orig-fn prefix)
  ;;     (unless (and (stringp prefix) (string-match-p "\\`[0-9]+\\'" prefix))
  ;;       (funcall orig-fn prefix)))

  ;;   (defun ora-advice-add (&rest args)
  ;;     (when (fboundp 'advice-add)
  ;;       (apply #'advice-add args)))

  ;;   (ora-advice-add 'company--good-prefix-p :around #'ora--company-good-prefix-p)

  ;;   (let ((map company-active-map))
  ;;     (mapc (lambda (x) (define-key map (format "%d" x) 'ora-company-number))
  ;;           (number-sequence 0 9))
  ;;     (define-key map " " (lambda ()
  ;;                           (interactive)
  ;;                           (company-abort)
  ;;                           (self-insert-command 1)))
    ;;     (define-key map (kbd "<return>") nil))
    )

#+end_src
** [[https://github.com/tumashu/company-posframe][company-posframe]]
Not yet ready to work on Mac (causes flickering). See these comments in ~company-posframe.el~:
#+begin_src emacs-lisp
  (defun company-posframe-quickhelp-raise-frame ()
    (interactive)
    ;; FIXME: On macOS, the new lower-frame call causes Emacs to hide.
    ;; 1. https://github.com/tumashu/company-posframe/issues/43
    ;; 2. https://lists.gnu.org/archive/html/emacs-devel/2020-05/msg03253.html
    (unless (memq system-type '(darwin))
      (posframe-funcall company-posframe-quickhelp-buffer
                        #'raise-frame)))
#+end_src

mostly taken from [[https://github.com/andreyorst/dotfiles/tree/master/.config/emacs][this config]]
#+begin_src emacs-lisp
  ;; (use-package company-posframe
  ;;   :after company
  ;;   :custom
  ;;   (company-posframe-quickhelp-show-header t)
  ;;   (company-posframe-show-indicator nil)
  ;;   (company-posframe-show-metadata t)
  ;;   (company-posframe-quickhelp-show-params
  ;;    (list :poshandler #'company-posframe-quickhelp-right-poshandler
  ;;          :internal-border-width 1
  ;;          :timeout 60
  ;;          :internal-border-color (face-attribute 'font-lock-regexp-grouping-backslash :foreground)
  ;;          :no-properties nil))
  ;;   (company-posframe-show-params
  ;;    (list :poshandler #'company-posframe-quickhelp-right-poshandler
  ;;          :internal-border-width 1
  ;;          :timeout 60
  ;;          :internal-border-color (face-attribute 'font-lock-regexp-grouping-backslash :foreground)
  ;;          :no-properties nil))
  ;;   :custom-face
  ;;   (company-posframe-metadata ((t (:inherit match))))
  ;;   :config
  ;;   (company-posframe-mode))
#+end_src
* Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :hook ((prog-mode) . flycheck-mode)
    :custom
    (flycheck-global-modes
     '(not text-mode outline-mode fundamental-mode org-mode
           diff-mode shell-mode eshell-mode term-mode))
    (flycheck-indication-mode 'right-fringe)
    (flycheck-display-errors-delay 0.75)
    :custom-face
    (flycheck-error ((t (:background nil :underline (:color "#e74c3c" :style wave)))))
    (flycheck-info ((t (:background nil :underline (:color "#b6e63e" :style wave)))))
    (flycheck-warning ((t (:background nil :underline (:color "#e2c770" :style wave)))))
    :config
    (when (fboundp #'defhydra)
      (defhydra hydra-flycheck (:color blue :hint nil)
        "
   ^Flycheck^         ^Errors^       ^Checker^
   _q_: quit          _p_: previous  _?_: describe
   _M_: manual        _n_: next      _d_: disable
   _v_: verify setup  _f_: check     _m_: mode
   ^ ^                _l_: list      _s_: select
   ^ ^                _C_: clear"
        ("q" ignore :exit t)
        ("M" flycheck-manual)
        ("v" flycheck-verify-setup)
        ("p" flycheck-previous-error)
        ("n" flycheck-next-error)
        ("f" flycheck-buffer)
        ("l" flycheck-list-errors)
        ("C" flycheck-clear)
        ("?" flycheck-describe-checker)
        ("d" flycheck-disable-checker)
        ("m" flycheck-mode)
        ("s" flycheck-select-checker))))
#+end_src
* Hydra
#+begin_src emacs-lisp
  (use-package hydra
    :ensure t
    :bind
    (("C-c h y f" . hydra-flycheck/body))
    (("C-c h y m" . hydra-multiple-cursors/body)))
#+end_src
** [[https://github.com/jerrypnz/major-mode-hydra.el][major-mode-hydra]]
Stolen from [[https://github.com/rememberYou/.emacs.d/blob/master/config.org#hydra][this config]]
#+begin_src emacs-lisp
  (use-package major-mode-hydra
    :ensure t
    :after hydra
    :preface
    (defun with-alltheicon (icon str &optional height v-adjust face)
      "Display an icon from all-the-icon."
      (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-faicon (icon str &optional height v-adjust face)
      "Display an icon from Font Awesome icon."
      (s-concat (all-the-icons-faicon icon ':v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-fileicon (icon str &optional height v-adjust face)
      "Display an icon from the Atom File Icons package."
      (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-octicon (icon str &optional height v-adjust face)
      "Display an icon from the GitHub Octicons."
      (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))
    :config
    (all-the-icons-install-fonts t))
#+end_src
*** pretty hydras
#+begin_src emacs-lisp
  ;; had to edit .mc-lists.el and move all hydra commands
  ;; from mc/cmds-to-run-for-all to mc/cmds-to-run-once
  ;; in order for this work (i.e. not multiple my cursors for each command)
  (pretty-hydra-define hydra-multiple-cursors
    (:hint nil :quit-key "q" :title (with-faicon "i-cursor" "Multiple Cursors" 1 -0.05))
    ("Mark/Unmark"
     (("a" mc/mark-all-like-this "mark all")
      ("n" mc/mark-next-like-this "mark next")
      ("p" mc/mark-previous-like-this "mark previous")
      ("N" mc/unmark-next-like-this "unmark next")
      ("P" mc/unmark-previous-like-this "unmark previous"))

     "Edit"
     (("e" mc/edit-lines "edit lines" :exit t)
      ("^" mc/edit-beginnings-of-lines "beginning of lines")
      ("$" mc/edit-ends-of-lines "ends of lines"))

     "Cycle"
     (("b" mc/cycle-backward "backward")
      ("f" mc/cycle-forward "forward"))

     "Misc."
     (("h" mc-hide-unmatched-lines-mode "hide unmatched lines"))))
#+end_src

* Miscellaneous
** [[https://jblevins.org/projects/markdown-mode/][markdown]]
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands
    (markdown-mode)
    :mode
    (("README\\.md\\'" . markdown-mode)
     ("\\.md\\'" . markdown-mode)
     ("\\.markdown\\'" . markdown-mode))
    :config
    (eval-after-load "markdown-mode"
      '(progn (define-key markdown-mode-map (kbd "M-n") nil)
              (define-key markdown-mode-map (kbd "M-p") nil))))
#+end_src
** [[https://github.com/pashky/restclient.el][restclient]]
manually explore and test HTTP REST webservices
#+begin_src emacs-lisp
  (use-package restclient
    :ensure t)
#+end_src
** [[https://melpa.org/#/edit-server][edit-server]]
server that responds to edit requests from Chrome
#+begin_src emacs-lisp
  (use-package edit-server
    :ensure t
    :config
    (edit-server-start))
#+end_src
** garbage collector
copied from [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][How does doom start up so quickly]] and [[https://github.com/MatthewZMD/.emacs.d#garbage-collection][this config]]


If you experience freezing, decrease this amount, if you increase stuttering, increase this amount.
#+begin_src emacs-lisp
  (defvar better-gc-cons-threshold 16777216 ; 16mb
    "The default value to use for `gc-cons-threshold'.
    If you experience freezing, decrease this.  If you experience stuttering, increase this.")

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold better-gc-cons-threshold
                    gc-cons-percentage 0.1)))


  ;; Garbage Collect when Emacs is out of focus and try to avoid garbage collection when using minibuffer.
  (add-hook 'emacs-startup-hook
            (lambda ()
              (if (boundp 'after-focus-change-function)
                  (add-function :after after-focus-change-function
                                (lambda ()
                                  (unless (frame-focus-state)
                                    (garbage-collect))))
                (add-hook 'after-focus-change-function 'garbage-collect))
              (defun gc-minibuffer-setup-hook ()
                (setq gc-cons-threshold (* better-gc-cons-threshold 4)))

              (defun gc-minibuffer-exit-hook ()
                (garbage-collect)
                (setq gc-cons-threshold better-gc-cons-threshold))

              (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
              (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
#+end_src
