* Basic setup
** frame size
#+BEGIN_SRC emacs-lisp
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+END_SRC emacs-lisp
** no tool bar
  #+begin_src emacs-lisp
  (tool-bar-mode -1)
  #+end_src
** desktop mode
keeps track of all the files you've opened and remembers them
  #+begin_src emacs-lisp
  (load-library "desktop")
  (desktop-save-mode 1)
  (require 'server)
  (or (server-running-p)
      (server-start))
  #+end_src
** change "yes or no?" to "y or n?"
  #+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  #+end_src
** subword mode
treat camel-case symbols as separate (i.e. M-f and M-b will move across parts of a camel-cased symbol)
  #+begin_src emacs-lisp
  (global-subword-mode 1)
  #+end_src
** delete text when it's marked by typing
  #+begin_src emacs-lisp
  (delete-selection-mode t)
  #+end_src
* Aesthetics (and other enhancements)
** theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-molokai t))
  ;; doom-monokai-classic - very similar to doom-molokai
#+end_src
** line stuff
*** add line numbers
  #+begin_src emacs-lisp
  (global-linum-mode t)
  (setq-default mode-line-front-space
                (append mode-line-front-space '((:eval (format "/%s" (line-number-at-pos (point-max)))))))
  #+end_src
*** wrap words for every line
  #+begin_src emacs-lisp
  (global-visual-line-mode 1)
  (setq visual-line-fringe-indicators '(bottom-left-angle bottom-right-angle))
  #+end_src
*** [[https://github.com/alpaker/fill-column-indicator][fill-column-indicator]]
show 80-character vertical marker

*TODO:* take out and replace with native [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Displaying-Boundaries.html][display-fill-column-indicator-mode]]
  #+begin_src emacs-lisp
    (use-package fill-column-indicator
      :ensure t
      :config
      (setq fci-rule-character-color "#202020")
      (setq fci-rule-width 1)
      :hook
      ((prog-mode) . fci-mode))
  #+end_src
**** [[https://github.com/company-mode/company-mode/issues/180#issuecomment-55047120][fix incompatibility with company]]
#+begin_src emacs-lisp
  (defvar-local company-fci-mode-on-p nil)

  (defun company-turn-off-fci (&rest ignore)
    (when (boundp 'fci-mode)
      (setq company-fci-mode-on-p fci-mode)
      (when fci-mode (fci-mode -1))))

  (defun company-maybe-turn-on-fci (&rest ignore)
    (when company-fci-mode-on-p (fci-mode 1)))

  (add-hook 'company-completion-started-hook 'company-turn-off-fci)
  (add-hook 'company-completion-finished-hook 'company-maybe-turn-on-fci)
  (add-hook 'company-completion-cancelled-hook 'company-maybe-turn-on-fci)
#+end_src
*** clean up any accidental trailing whitespace upon save.
  #+begin_src emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
  ;; have to disable few items in whitespace-style
  ;; according to https://www.emacswiki.org/emacs/SmartTabs
  (setq whitespace-style
     '(face trailing tabs spaces lines newline empty indentation space-before-tab space-mark tab-mark newline-mark))
  #+end_src
** indentation
*** aesthetics
**** [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]]
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :custom
    (highlight-indent-guides-method 'character)
    (highlight-indent-guides-responsive 'top)
    (highlight-indent-guides-delay 0)
    (highlight-indent-guides-auto-set-faces t)
    :hook
    ((prog-mode yaml-mode nxml-mode) . highlight-indent-guides-mode))
#+end_src
*** functionality
*Overall strategy*: infer-indentation-style for a mode-hook. If spaces > tabs, then turn tabs OFF, else turn tabs ON. If tabs are turned ON, then smart-tabs will take over (indent-tabs-mode must be non-nil for smart-tabs to work according to the [[https://www.emacswiki.org/emacs/SmartTabs][SmartTabs wiki]])
  #+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)

  ;; infer indentation style of file
  (defun infer-indentation-style ()
    ;; if our source file uses tabs, we use tabs, if spaces spaces, and if
    ;; neither, we use the current indent-tabs-mode
    (let ((space-count (how-many "^  " (point-min) (point-max)))
          (tab-count (how-many "^\t" (point-min) (point-max))))
      (if (> space-count tab-count) (setq indent-tabs-mode nil))
      (if (> tab-count space-count) (setq indent-tabs-mode t))))
#+end_src
**** [[https://www.emacswiki.org/emacs/SmartTabs][smart-tabs-mode]]
#+begin_src emacs-lisp
  (use-package smart-tabs-mode
    :ensure t
    :config
    (autoload 'smart-tabs-mode "smart-tabs-mode"
      "Intelligently indent with tabs, align with spaces!")
    (autoload 'smart-tabs-mode-enable "smart-tabs-mode")
    (autoload 'smart-tabs-advice "smart-tabs-mode")
    (autoload 'smart-tabs-insinuate "smart-tabs-mode")
    (smart-tabs-insinuate 'c 'c++ 'java 'javascript 'python
                          'ruby))
#+end_src
**** indent entire buffer
  #+begin_src emacs-lisp
  (defun indent-buffer ()
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max) nil)))
  (global-set-key (kbd "C-t") 'indent-buffer)
  #+end_src
** delimiters
*** show parentheses matching
  #+begin_src emacs-lisp
  (show-paren-mode 1)
  #+end_src
*** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]
  #+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook
    ((prog-mode emacs-lisp-mode lisp-mode) . rainbow-delimiters-mode))
  #+end_src
*** [[https://www.emacswiki.org/emacs/ParEdit][ParEdit]]
[[http://danmidwood.com/content/2014/11/21/animated-paredit.html][nice animated guide to Paredit]]
  #+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :init
    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    :config
    (eval-after-load "paredit.el" '(require 'paredit-menu))
    :hook
    ((emacs-lisp-mode eval-expression-minibuffer-setup lisp-mode lisp-interaction-mode scheme-mode) . enable-paredit-mode))
  #+end_src
*** electric pair mode
electric for everything that ParEdit doesn't cover
  #+begin_src emacs-lisp
  (electric-pair-mode 1)
  (setq electric-pair-preserve-balance nil)

  ;; Disable pairs when entering minibuffer
  (add-hook 'minibuffer-setup-hook (lambda () (electric-pair-mode 0)))
  ;; Renable pairs when existing minibuffer
  (add-hook 'minibuffer-exit-hook (lambda () (electric-pair-mode 1)))
  #+end_src
** highlighting
*** [[https://github.com/Malabarba/beacon][beacon]]
#+begin_src emacs-lisp
  ;; highlight line where cursor is
  ;; used beacon setup from https://ladicle.com/post/config/#beacon
  ;; for some reason the setup based on beacon's README wouldn't
  ;; work with buffer changes and scrolling
  (use-package beacon
    :ensure t
    :demand t
    :custom
    (beacon-color "turquoise1")
    :hook
    (after-init . beacon-mode))
#+end_src
*** rainbow-mode
highlight text representing color codes
  #+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
  #+end_src
*** [[https://github.com/gennad/auto-highlight-symbol][auto-highlight-symbol]]
  #+begin_src emacs-lisp
  (use-package auto-highlight-symbol
    :ensure t
    :custom
    (ahs-idle-interval 1.0)
    (ahs-default-range 'ahs-range-whole-buffer)
    :config
    (global-auto-highlight-symbol-mode)
    :hook
    ((prog-mode) . auto-highlight-symbol-mode))

  (global-set-key (kbd "C-x p") 'ahs-backward)
  (global-set-key (kbd "C-x n") 'ahs-forward)
  #+end_src
*** [[https://github.com/magnars/expand-region.el][expand-region]]
  #+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind
    ("C-=" . er/expand-region))
  #+end_src
** hiding code
[[https://www.emacswiki.org/emacs/HideShow][HideShow]] - for folding blocks of code

The original ~toggle-fold~ function I found wasn't actually working the way I wanted it to (the cursor had to be in a particular position to show already-hidden code). I tried using the ~toggle-selective-display~ and ~toggle-hiding~ functions from the above wiki but to no avail. I even tried cherry picking some of the source code (~hs-find-block-beginning~, ~hs-already-hidden-p~) out of hideshow.el but no dice. In the end, I decided to just roll with my own hide-block and show-block functions... oh well
  #+begin_src emacs-lisp
    (add-hook 'prog-mode-hook #'hs-minor-mode)

    (defun my-hs-hide-block ()
      "move to end of line, then hs-hide-block"
      (interactive)
      (save-excursion
        (end-of-line)
        (hs-hide-block)))
    (global-set-key (kbd "C-c h s h") 'my-hs-hide-block)

    (defun my-hs-show-block ()
      "move to beginning of line, then hs-show-block"
      (interactive)
      (save-excursion
        (beginning-of-line)
        (hs-show-block)))
    (global-set-key (kbd "C-c h s s") 'my-hs-show-block)
  #+end_src
** [[https://github.com/editorconfig/editorconfig-emacs][editorconfig]]

https://editorconfig.org/

maintain consistent coding styles between devs working on the same project
  #+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
  #+end_src
** miscellaneous
*** [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind
    (("C-c m c e" . mc/edit-lines)
     ("C-c m c n" . mc/mark-next-like-this-symbol)
     ("C-c m c p" . mc/mark-previous-like-this-symbol)
     ("C-c m c a" . mc/mark-all-like-this)
     ("C-c m c N" . mc/unmark-next-like-this)
     ("C-c m c P" . mc/unmark-previous-like-this)
     ("C-c m c b" . mc/cycle-backward)
     ("C-c m c f" . mc/cycle-forward)
     ("C-c m c ^" . mc/edit-beginnings-of-lines)
     ("C-c m c $" . mc/edit-ends-of-lines)
     ("C-c m c h" . mc-hide-unmatched-lines-mode)
     ("C-S-<mouse-1>" . mc/add-cursor-on-click)))
#+end_src
*** [[https://github.com/magit/magit][magit]]
#+begin_src emacs-lisp
(use-package magit
  :ensure t)
#+end_src
*** [[https://github.com/justbur/emacs-which-key][which-key]]
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1.0))
#+end_src
*** [[https://github.com/chubin/cheat.sh][cheat-sh]]
#+begin_src emacs-lisp
  (use-package cheat-sh
    :ensure t)
#+end_src
*** turn off stuff to speed things up
*TODO*: shorten ~turn-off-sluggish-minor-modes~ by iterating through a list of minor modes (versus having an if-then block for every minor mode); ~turn-off-sluggish-minor-modes-2~ makes it to the ~bound-and-true-p~ and conks out b/c of the lambda
#+begin_src emacs-lisp
  (defun turn-off-sluggish-minor-modes ()
    "disable minor modes that are making emacs slow
    when working with large files"
    (interactive)
    (if (bound-and-true-p auto-highlight-symbol-mode)
        (progn
          (message "auto-highlight-symbol-mode is ON >>> turning OFF now")
          (auto-highlight-symbol-mode 0))
      (message "auto-highlight-symbol-mode is already OFF"))
    (if (bound-and-true-p highlight-indent-guides-mode)
        (progn
          (message "highlight-indent-guides-mode is ON >>> turning OFF now")
          (highlight-indent-guides-mode 0))
      (message "highlight-indent-guides-mode is already OFF"))
    (if (bound-and-true-p beacon-mode)
        (progn
          (message "beacon-mode is ON >>> turning OFF now")
          (beacon-mode 0))
      (message "beacon-mode is already OFF"))
    (if (bound-and-true-p flycheck-mode)
        (progn
          (message "flycheck-mode is ON >>> turning OFF now")
          (flycheck-mode 0))
      (message "flycheck-mode is already OFF"))
    (if (bound-and-true-p font-lock-mode)
        (progn
          (message "font-lock-mode is ON >>> turning OFF now")
          (font-lock-mode 0))
      (message "font-lock-mode is already OFF")))

  ;; (defun turn-off-sluggish-minor-modes-2 ()
  ;;   "disable minor modes that are making emacs slow
  ;;   when working with large files"
  ;;   (interactive)
  ;;   (let ((sluggish-minor-modes #'(auto-highlight-symbol-mode
  ;;                                  highlight-indent-guides-mode
  ;;                                  beacon-mode
  ;;                                  flycheck-mode)))
  ;;     (dolist (mode sluggish-minor-modes)
  ;;       (print mode)
  ;;       (if (bound-and-true-p (lambda () (mode)))
  ;;           (progn
  ;;             (message "turning OFF minor mode")
  ;;             (mode 0))
  ;;         (message "MODE is already OFF")))))

  ;; (global-set-key (kbd "C-c t o 2") 'turn-off-sluggish-minor-modes-2)
#+end_src
* Buffer and Window stuff
** ibuffer
#+begin_src emacs-lisp
  (setq ibuffer-saved-filter-groups
        ' (("default"
            ("C"
             (or (name . "\\.c$")))
            ("Java"
             (or (name . "\\.java$")))
            ("Ruby"
             (or (mode . ruby-mode)
                 (mode . enh-ruby-mode)
                 (name . "\\.rb$")
                 ))
            ("js"
             (or (mode . js2-mode)
                 (mode . javascript-mode)
                 (name . "\\.js")))
            ("html"
             (or (name . "\\.html$")
                 (mode . html-mode)
                 (mode . handlebars-mode)
                 ))
            ("css"
             (or (mode . css-mode)
                 (name . "\\.css$")))
            ("xml"
             (or (mode . nxml-mode)
                 (name . "\\.xml$")))
            ("yaml"
             (or (mode . yaml-mode)
                 (name . "\\.ya?ml$")))
            )))
  (setq ibuffer-formats
        '((mark modified read-only " "
                (name 40 40 :left :elide) " "
                (mode 15 15 :left :elide) " " filename-and-process)
          (mark " " (name 16 -1) " " filename)))
  (put 'narrow-to-region 'disabled nil)
  (add-hook 'ibuffer-hook (lambda()
                            (local-set-key "" 'other-window)))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src
** switch-to-last-buffer
  #+begin_src emacs-lisp
  (defun switch-to-last-buffer ()
    (interactive)
    (switch-to-buffer nil))
  (global-set-key (kbd "C-S-b") 'switch-to-last-buffer)
  #+end_src
** focus on newly created windows
both stolen from [[https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org#following-window-splits][UncleDaves's config]]
  #+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
  #+end_src
** always kill current buffer
  #+begin_src emacs-lisp
  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
  #+end_src
** revert buffer no confirm
#+begin_src emacs-lisp
(defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))
(global-set-key (kbd "s-u") 'revert-buffer-no-confirm)
#+end_src
** rename-file-and-buffer
source: http://steve.yegge.googlepages.com/my-dot-emacs-file
  #+begin_src emacs-lisp
  (defun rename-file-and-buffer(new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "New name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (if (get-buffer new-name)
            (message "A buffer named '%s' already exists!" new-name)
          (progn
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil))))))
  (global-set-key (kbd "C-c r n") 'rename-file-and-buffer)
  #+end_src
** global window/workspace saving functions
  #+begin_src emacs-lisp
    (defvar g_workspace (current-window-configuration))

    (defun save-workspace()
      (setq g_workspace (current-window-configuration))
      (princ "workspace saved"))

    (defun save-or-restore-workspace()
      (interactive)
      (if (> (count-windows) 1)
          (save-workspace)
        (set-window-configuration g_workspace)))
    (global-set-key (kbd "C-x C-w") 'save-or-restore-workspace)

    (setq backup-directory-alist `((".*" . "~/.emacs.d/.saves")))
    (setq auto-save-file-name-transforms
          `((".*" ,"~/.emacs.d/.saves" t)))
  #+end_src
** don't open new window in emacs
#+begin_src emacs-lisp
  ;; "might" make it so that new windows don't pop up each time
  ;; you open something with Emacs
  (setq ns-pop-up-frames nil)
#+end_src
* Org Mode
** org related vars, defuns, key bindings, etc.
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'reorganize-frameasfd)
  (add-hook 'org-mode-hook 'org-indent-mode)

  (defun reload-config ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r c") 'reload-config)

  (global-set-key (kbd "C-c '") 'org-edit-src-code)
#+END_SRC
** org-structure-template-alist
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp
  "))
#+END_SRC
** org-bullets
better looking bullets for .org files
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
* Navigation
** basic navigation
  #+begin_src emacs-lisp
  (global-set-key (kbd "C-o") 'other-window)
  (global-set-key (kbd "C-l") 'goto-line)
  (global-set-key (kbd "C-x l") 'recenter-top-bottom)
  #+end_src
** [[https://github.com/dimitri/switch-window][switch-window]]
switch windows quickly when > 2 windows
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 3)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "g" "h" "j" "k" "l" "q" "w" "e" "r"))
    :bind
    ([remap other-window] . switch-window))
#+end_src
** [[https://github.com/abo-abo/avy][avy]]
quickly jump to char or line
  #+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :config
    (setq avy-keys-alist
          `((avy-goto-char . ,(number-sequence ?a ?z))))
    (setq avy-background t)
    :bind
    ("C-c f" . avy-goto-char)
    ("C-c a l" . avy-goto-line))
  #+end_src
** [[https://github.com/jacktasia/dumb-jump][dumb-jump]]
locate definitions of funcs or vars
  #+begin_src emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (setq dumb-jump-selector 'ivy)
    ;; see https://www.reddit.com/r/emacs/comments/hzxvke/how_do_people_have_dumbjump_setup/
    ;; and https://github.com/jacktasia/dumb-jump#obsolete-commands-and-options
    ;; for latest update
    (setq xref-backend-functions (remq 'etags--xref-backend xref-backend-functions))
    (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate t)
    :hook
    ((prog-mode) . dumb-jump-mode)
    :bind
    ("C-c d g" . dumb-jump-go)
    ("C-c d p" . dumb-jump-back)
    ("C-c d q" . dumb-jump-quick-look))
  #+end_src
* Scrolling
#+begin_src emacs-lisp
  ;; scrolling
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time

  (defun gcm-scroll-up ()
    (interactive)
    (scroll-down 3))
  (global-set-key (kbd "M-p") 'gcm-scroll-up)

  (defun gcm-scroll-down ()
    (interactive)
    (scroll-up 3))
  (global-set-key (kbd "M-n") 'gcm-scroll-down)
#+end_src

* Killing, Yanking, Moving lines, etc.
** killing
*** kill whole word
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c k w") 'kill-whole-word)
#+end_src
*** kill whole line
  #+begin_src emacs-lisp
  (global-set-key (kbd "C-c k l") 'kill-whole-line)
  #+end_src
** yanking
#+begin_src emacs-lisp
  (defun copy-whole-word ()
    "Copies a word without regard for cursor position."
    (interactive)
    (save-excursion
      (forward-char 1)
      (backward-word)
      (kill-word 1)
      (yank)))
  (global-set-key (kbd "C-c y w") 'copy-whole-word)

  (defun copy-whole-line ()
    "Copies a line without regard for cursor position."
    (interactive)
    (kill-new
     (buffer-substring
      (point-at-bol)
      (point-at-eol))))
  (global-set-key (kbd "C-c y l") 'copy-whole-line)

  (defun insert-line-below ()
    "Insert an empty line below the current line."
    (interactive)
    (end-of-line)
    (newline))

  (defun insert-line-above ()
    "Insert an empty line above the current line."
    (interactive)
    (end-of-line 0)
    (newline))

  (defun copy-and-yank-line-below ()
    "Copies a line and inserts it down one line while keeping your cursor
     position constant"
    (interactive)
    (save-excursion
      (copy-whole-line)
      (insert-line-below)
      (yank)))
  (global-set-key (kbd "C-c y n") 'copy-and-yank-line-below)

  (defun copy-and-yank-line-above ()
    "Copies a line and inserts it down one line while keeping your cursor
     position constant"
    (interactive)
    (save-excursion
      (copy-whole-line)
      (insert-line-above)
      (yank)))
  (global-set-key (kbd "C-c y p") 'copy-and-yank-line-above)
#+end_src
** moving lines
  #+begin_src emacs-lisp
  (defun move-line (n)
    "Move the current line up or down by N lines."
    (interactive "p")
    (beginning-of-line)
    (setq col (current-column))
    (setq start (point))
    (end-of-line) (forward-char) (setq end (point))
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (insert line-text)
      ;; restore point to original column in moved line
      (forward-line -1)
      (forward-char col)))

  (defun move-line-up (n)
    "Move the current line up by N lines."
    (interactive "p")
    (move-line (if (null n) -1 (- n))))
  (global-set-key (kbd "M-<up>") 'move-line-up)

  (defun move-line-down (n)
    "Move the current line down by N lines."
    (interactive "p")
    (move-line (if (null n) 1 n)))
  (global-set-key (kbd "M-<down>") 'move-line-down)

  #+end_src
** moving regions
#+begin_src emacs-lisp
  (defun move-region (start end n)
    "Move the current region up or down by N lines."
    (interactive "r\np")
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (let ((start (point)))
        (insert line-text)
        (setq deactivate-mark nil)
        (set-mark start))))

  (defun move-region-up (start end n)
    "Move the current line up by N lines."
    (interactive "r\np")
    (move-region start end (if (null n) -1 (- n))))
  (global-set-key (kbd "C-M-<up>") 'move-region-up)

  (defun move-region-down (start end n)
    "Move the current line down by N lines."
    (interactive "r\np")
    (move-region start end (if (null n) 1 n)))
  (global-set-key (kbd "C-M-<down>") 'move-region-down)
#+end_src

* [[https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html][Ivy, Counsel, Swiper]] etc.
** ivy
make sure ivy, counsel, and swiper are all installed using the same package repo (according to this [[https://github.com/abo-abo/swiper/issues/2591#issuecomment-640022754][GitHub comment]])
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-display-style 'fancy)
    (ivy-count-format "【%d/%d】 ")
    ;; configure regexp engine
    (ivy-re-builders-alist
        ;; allow input not in order
        '((t . ivy--regex-ignore-order)))
    (ivy-wrap t)
    :config
    (ivy-mode 1)
    (setq projectile-completion-system 'ivy))

#+end_src
*** ivy-rich
#+begin_src emacs-lisp
(use-package ivy-rich
    :ensure t
    :config
    (setcdr (assq t ivy-format-functions-alist)
            #'ivy-format-function-line)
    (ivy-rich-mode 1))
#+end_src

** counsel
TODO: use-package-ify all of counsel
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :after ivy)

  ;; no regexp by default
    (with-eval-after-load 'counsel
      (setq ivy-initial-inputs-alist nil))

    ;; counsel bindings
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-h f") 'counsel-describe-function)
    (global-set-key (kbd "C-h v") 'counsel-describe-variable)
    (global-set-key (kbd "C-h S") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "M-y") 'counsel-yank-pop)

    (let ((bindings #'(("g" . counsel-git-grep)
                      ("r" . counsel-rg)
                      ("m" . counsel-mark-ring))))
      (dolist (binding bindings)
        (global-set-key (kbd (concat "C-c c " (car binding))) (cdr binding))))

    (defun counsel-git-grep-thing-at-point ()
      (interactive)
      (counsel-git-grep (kill-new (thing-at-point 'symbol))))
    (global-set-key (kbd "C-c c G") 'counsel-git-grep-thing-at-point)
#+end_src
** swiper
TODO: use-package-ify all of swiper
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :after ivy
    :bind
    ("C-s" . swiper)
    ("C-M-s" . swiper-thing-at-point))
#+end_src
** [[https://github.com/DarwinAwardWinner/amx][amx]]
alternative interface for M-x in Emacs
#+begin_src emacs-lisp
  (use-package amx
    :ensure t
    :after ivy
    :custom
    (amx-backend 'auto)
    (amx-save-file "~/.emacs.d/amx-items")
    :config
    (amx-mode 1))
#+end_src
* [[https://github.com/bbatsov/projectile][Projectile]]
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode))
#+end_src
* Shell stuff
#+begin_src emacs-lisp
  (defun my-send-string-to-shell (s)
    (let* ((buffer-name "*shell*")
           (process (get-buffer-process buffer-name)))
      (with-current-buffer buffer-name
        (unless process
          (error "No process in %s" buffer-name))
        (save-some-buffers)
        ;;(comint-clear-buffer)
        (goto-char (process-mark process))
        (insert s)
        (comint-send-input nil t))))

  (defun open-shell-if-not-open ()
    (when (not (get-buffer "*shell*"))
      (shell))
    (switch-to-buffer "*shell*"))
#+end_src
* Languages
** C
#+begin_src emacs-lisp
  (defun my-c-mode-common-hook ()
    (infer-indentation-style)
    (setq c-basic-offset 4))

  (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
#+end_src
*** [[https://github.com/randomphrase/company-c-headers][company-c-headers]]
Can't use ~/usr/include~ dir for C headers location due to Mac OS's System Integrity Protection
#+begin_src emacs-lisp
  (use-package company-c-headers
    :after company
    :config
    (push 'company-c-headers company-backends)
    (add-to-list 'company-c-headers-path-system "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include"))
#+end_src
*** compilation functions
#+begin_src emacs-lisp
  ;; custom compile functions
  ;; TODO: make one-button function that compiles everything (w/o using a makefile)
  ;; and if things compile correctly, then put me in that buffer
  ;; otherwise don't run and allow to navigate to next-error
  (defun my-insto-compile()
    (interactive)
    (let* ((c-file (buffer-file-name (current-buffer)))
           (buffer-name "*shell*")
           (process (get-buffer-process buffer-name))
           )
      (with-current-buffer buffer-name
        (unless process
          (error "No process in %s" buffer-name))
        (save-some-buffers)
        (goto-char (process-mark process))
        (insert (concat "gcc -Werror " c-file " && ./a.out"))
        (comint-send-input nil t)
        (switch-to-buffer "*shell*"))))

  (defun my-compile-v2()
    (interactive)
    (let* ((c-file (buffer-file-name (current-buffer)))
           (c-file-basename (file-name-base c-file))
           (compile-string (concat "gcc -Werror " c-file " -o " c-file-basename " && ./" c-file-basename)))
      (open-shell-if-not-open)
      (my-send-string-to-shell compile-string)))

  (defun my-compile-v1()
    (interactive)
    (let* ((c-file (buffer-file-name (current-buffer)))
           (c-file-basename (file-name-base c-file))
           (compile-string (concat "gcc -Werror " c-file " -o " c-file-basename " && ./" c-file-basename))
           )
      (compile compile-string t)
      (switch-to-buffer "*compilation*")))
  (global-set-key (kbd "<f6>") 'my-compile-v1)

  (defun my-compilation-hook()
    ;; comp mode, stop overriding my other window keybinding please
    (local-set-key (kbd "C-o") 'other-window))

  (add-hook 'compilation-mode-hook 'my-compilation-hook)
#+end_src
** Ruby
[[https://wikemacs.org/wiki/Ruby][WikEmacs]] does not have a bad starting point for Ruby
*** [[https://github.com/zenspider/enhanced-ruby-mode][enh-ruby-mode]]
#+begin_src emacs-lisp
  (use-package enh-ruby-mode
    :ensure t
    :mode
    (("\\.rb$" . enh-ruby-mode)
     ("\\.erb$" . enh-ruby-mode)
     ("\\.rake$" . enh-ruby-mode)
     ("Rakefile$" . enh-ruby-mode)
     ("\\.gemspec$" . enh-ruby-mode)
     ("\\.ru$" . enh-ruby-mode)
     ("Gemfile$" . enh-ruby-mode))
    :config
    (defun my-ruby-mode-hook ()
      "Setup ruby modes for me."
      (if window-system
          (linum-mode))
      (infer-indentation-style)
      (add-hook 'enh-ruby-mode-hook 'ac-robe-setup)
      (add-hook 'enh-ruby-mode-hook 'ruby-end-mode)
      (add-hook 'enh-ruby-mode-hook 'robe-mode)
      (add-hook 'enh-ruby-mode-hook 'flymake-ruby-load))

    (add-hook 'enh-ruby-mode-hook 'my-ruby-mode-hook))
#+end_src
*** [[https://github.com/nonsequitur/inf-ruby][inf-ruby]]
REPL buffer connected to a Ruby subprocess
#+begin_src emacs-lisp
  (use-package inf-ruby
    :ensure t
    :bind
    ("C-c r r" . inf-ruby))
#+end_src
*** [[https://github.com/senny/rvm.el][rvm]]
#+begin_src emacs-lisp
  (use-package rvm
    :ensure t
    :config
    (rvm-use-default))
#+end_src
*** [[https://github.com/dgutov/robe][robe]]
#+begin_src emacs-lisp
  (use-package robe
    :ensure t)

  (defadvice inf-ruby-console-auto (before activate-rvm-for-robe activate)
    (rvm-activate-corresponding-ruby))
  (global-set-key (kbd "C-c r a") 'rvm-activate-corresponding-ruby)

    ;; (push 'company-robe company-backends)
#+end_src
*** [[https://github.com/rejeep/ruby-end.el][ruby-end]]
#+begin_src emacs-lisp
  (use-package ruby-end
    :ensure t)
#+end_src
*** [[https://github.com/purcell/flymake-ruby][flymake-ruby]]
#+begin_src emacs-lisp
  (use-package flymake-ruby
    :ensure t)
#+end_src
*** [[https://github.com/michaelklishin/cucumber.el][feature-mode]]
#+begin_src emacs-lisp
  (use-package feature-mode
    :ensure t
    :mode
    (("\.feature$" . feature-mode))
    :config
    (setq freature-use-rvm t) ;; Tell Cucumber to use RVM
    (setq feature-cucumber-command "cucumber {options} {feature}"))
#+end_src
*** [[https://github.com/pezra/rspec-mode][rspec-mode]]
#+begin_src emacs-lisp
  (use-package rspec-mode
    :ensure t
    :config
    ;; use rspec instead of rake spec
    (setq rspec-use-rake-when-possible nil)
    ;; Scroll to the first test failure
    (setq compilation-scroll-output 'first-error))
#+end_src
** Javascript (and web-mode)
*** [[https://github.com/mooz/js2-mode][js2-mode]]
#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode
    (("\\.js\\'" . js2-mode))
    :config
    ;; better imenu
    (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
    ;; searches the current files parent directories for the
    ;; node_modules/.bin/ directory and adds it to the buffer local exec-path
    (defun get-npm-exec-path()
      "prepend the most local node package manager executable path to the current exec path and return it"
      (let* ((root (locate-dominating-file
                    (or (buffer-file-name) default-directory)
                    "node_modules")))
        (cons (concat root "/node_modules/.bin") exec-path)))
    (defun my-js-mode-hook()
      (set (make-local-variable 'exec-path) (get-npm-exec-path))
      (infer-indentation-style)
      (add-hook 'js2-mode-hook (lambda ()
                                 (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
      (add-hook 'js2-mode-hook 'my-js-mode-hook)))
#+end_src
*** [[https://github.com/NicolasPetton/xref-js2][xref-js2]]
#+begin_src emacs-lisp
  (use-package xref-js2
    :ensure t
    :config
    ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
    ;; unbind it.
    (define-key js-mode-map (kbd "M-.") nil))
#+end_src
*** [[https://github.com/codesuki/eslint-fix][eslint-fix]]
#+begin_src emacs-lisp
  ;; eslint
  (use-package eslint-fix
    :ensure t)
  ;; (eval-after-load 'js2-mode
  ;;   '(add-hook 'js2-mode-hook (lambda () (add-hook 'after-save-hook 'eslint-fix nil t))))
#+end_src
*** [[https://github.com/fxbois/web-mode][web-mode]]
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :mode
    (("\\.phtml\\'" . web-mode)
     ("\\.tpl\\.php\\'" . web-mode)
     ("\\.[agj]sp\\'" . web-mode)
     ("\\.as[cp]x\\'" . web-mode)
     ("\\.jsx\\'" . web-mode)
     ("\\.erb\\'" . web-mode)
     ("\\.mustache\\'" . web-mode)
     ("\\.hbs\\'" . web-mode)
     ("\\.djhtml\\'" . web-mode)
     ("\\.html?\\'" . web-mode))
    :config
    (setq web-mode-enable-current-element-highlight t)
    (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-indentation t)
    (setq web-mode-markup-indent-offset 2)
    ;; (add-hook 'web-mode-hook (lambda () (add-hook 'after-save-hook web-mode-buffer-indent)))

    (defvar web-mode-electric-pairs '((?\< . ?\>)) "helpful pairing for web mode")
    (defun web-mode-add-electric-pairs ()
      (setq-local electric-pair-pairs (append electric-pair-pairs web-mode-electric-pairs))
      (setq-local electric-pair-text-pairs electric-pair-pairs))
    (add-hook 'web-mode-hook 'web-mode-add-electric-pairs))
#+END_SRC
** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :hook (json-mode . flycheck-mode)
    :custom (js-indent-level 2))
#+end_src
*** [[https://github.com/gongo/json-reformat][json-reformat]]
#+begin_src emacs-lisp
  (use-package json-reformat
    :ensure t)
#+end_src
** Groovy
(mostly for Jenkinsfiles)
#+begin_src emacs-lisp
  (use-package groovy-mode
    :ensure t
    :mode
    (("\\.groovy$" . groovy-mode))
    :config
    (add-hook 'groovy-mode-hook
              (lambda ()
                (c-set-offset 'label 2))
              (infer-indentation-style)))
#+end_src
** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode
      (("\\.ya?ml$" . yaml-mode)))
#+end_src
* [[https://emacs-lsp.github.io/lsp-mode/][LSP]]
copied a lot of stuff from [[https://github.com/MatthewZMD/.emacs.d#lsp][this config]] and [[https://github.com/andreyorst/dotfiles/tree/master/.config/emacs#lsp-mode][this config]]
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :defer t
    :custom
    (lsp-keymap-prefix "C-c l")
    (lsp-auto-guess-root nil)
    (lsp-eldoc-hook nil)
    (lsp-enable-indentation nil)
    (lsp-enable-folding nil)
    (lsp-enable-links nil)
    (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
    (lsp-file-watch-threshold 2000)
    (read-process-output-max (* 1024 1024)) ;; 1mb --> from https://emacs-lsp.github.io/lsp-mode/page/performance/
    (lsp-completion-provider :capf)
    (lsp-restart 'auto-restart)
    (lsp-log-io nil)
    ;; (lsp-print-performance t)
    :hook ((java-mode c-mode c++-mode) . lsp))
#+end_src
* Company
mostly taken from [[https://github.com/andreyorst/dotfiles/tree/master/.config/emacs][this config]]
#+begin_src emacs-lisp
  (use-package company
    :bind (:map company-active-map
                ("TAB" . company-complete-common-or-cycle)
                ("<tab>" . company-complete-common-or-cycle)
                ("C-d" . company-show-doc-buffer)
                ("M-." . company-show-location))
    :hook
    (after-init . global-company-mode)
    :custom
    (company-require-match 'never)
    (company-minimum-prefix-length 2)
    (company-tooltip-align-annotations t)
    (company-show-numbers t)
    (company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                         company-preview-frontend
                         company-echo-metadata-frontend))
    (company-backends '(company-clang
                        company-capf
                        (company-dabbrev-code company-gtags company-etags
                                              company-keywords)
                        company-cmake
                        company-dabbrev
                        company-semantic
                        company-elisp
                        company-files))
    :config
    ;; use numbers to insert company match
    ;; stolen from https://github.com/abo-abo/oremacs/blob/9c1dd95f52bd6f65313c50c1a85c8bacdde74581/modes/ora-company.el
    (defun ora-company-number ()
      "Forward to `company-complete-number'.
  Unless the number is potentially part of the candidate.
  In that case, insert the number."
      (interactive)
      (let* ((k (this-command-keys))
             (re (concat "^" company-prefix k)))
        (if (or (cl-find-if (lambda (s) (string-match re s))
                            company-candidates)
                (> (string-to-number k)
                   (length company-candidates))
                (looking-back "[0-9]+\\.[0-9]*" (line-beginning-position)))
            (self-insert-command 1)
          (company-complete-number
           (if (equal k "0")
               10
             (string-to-number k))))))

    (defun ora--company-good-prefix-p (orig-fn prefix)
      (unless (and (stringp prefix) (string-match-p "\\`[0-9]+\\'" prefix))
        (funcall orig-fn prefix)))

    (defun ora-advice-add (&rest args)
      (when (fboundp 'advice-add)
        (apply #'advice-add args)))

    (ora-advice-add 'company--good-prefix-p :around #'ora--company-good-prefix-p)

    (let ((map company-active-map))
      (mapc (lambda (x) (define-key map (format "%d" x) 'ora-company-number))
            (number-sequence 0 9))
      (define-key map " " (lambda ()
                            (interactive)
                            (company-abort)
                            (self-insert-command 1)))
      (define-key map (kbd "<return>") nil)))

#+end_src
** [[https://github.com/tumashu/company-posframe][company-posframe]]
mostly taken from [[https://github.com/andreyorst/dotfiles/tree/master/.config/emacs][this config]]
#+begin_src emacs-lisp
  (use-package company-posframe
    :after company
    :custom
    (company-posframe-quickhelp-show-header t)
    (company-posframe-show-indicator nil)
    (company-posframe-show-metadata t)
    (company-posframe-quickhelp-show-params
     (list :poshandler #'company-posframe-quickhelp-right-poshandler
           :internal-border-width 1
           :timeout 60
           :internal-border-color (face-attribute 'font-lock-regexp-grouping-backslash :foreground)
           :no-properties nil))
    (company-posframe-show-params
     (list :poshandler #'company-posframe-quickhelp-right-poshandler
           :internal-border-width 1
           :timeout 60
           :internal-border-color (face-attribute 'font-lock-regexp-grouping-backslash :foreground)
           :no-properties nil))
    :custom-face
    (company-posframe-metadata ((t (:inherit match))))
    :config
    (company-posframe-mode))
#+end_src
* Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :hook ((prog-mode) . flycheck-mode)
    :custom
    (flycheck-global-modes
     '(not text-mode outline-mode fundamental-mode org-mode
           diff-mode shell-mode eshell-mode term-mode))
    (flycheck-indication-mode 'right-fringe)
    (flycheck-display-errors-delay 0.75)
    :custom-face
    (flycheck-error ((t (:background nil :underline (:color "#e74c3c" :style wave)))))
    (flycheck-info ((t (:background nil :underline (:color "#b6e63e" :style wave)))))
    (flycheck-warning ((t (:background nil :underline (:color "#e2c770" :style wave)))))
    :config
    (when (fboundp #'defhydra)
      (defhydra hydra-flycheck (:color blue :hint nil)
        "
   ^Flycheck^         ^Errors^       ^Checker^
   _q_: quit          _p_: previous  _?_: describe
   _M_: manual        _n_: next      _d_: disable
   _v_: verify setup  _f_: check     _m_: mode
   ^ ^                _l_: list      _s_: select
   ^ ^                _C_: clear"
        ("q" ignore :exit t)
        ("M" flycheck-manual)
        ("v" flycheck-verify-setup)
        ("p" flycheck-previous-error)
        ("n" flycheck-next-error)
        ("f" flycheck-buffer)
        ("l" flycheck-list-errors)
        ("C" flycheck-clear)
        ("?" flycheck-describe-checker)
        ("d" flycheck-disable-checker)
        ("m" flycheck-mode)
        ("s" flycheck-select-checker))))
#+end_src
* Hydra
#+begin_src emacs-lisp
  (use-package hydra
    :ensure t
    :bind (("C-c h y f" . hydra-flycheck/body)))
#+end_src
* Miscellaneous
** [[https://jblevins.org/projects/markdown-mode/][markdown]]
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode)
    :mode (("README\\.md\\'" . markdown-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)))
#+end_src
** [[https://github.com/pashky/restclient.el][restclient]]
manually explore and test HTTP REST webservices
#+begin_src emacs-lisp
  (use-package restclient
    :ensure t)
#+end_src
** [[https://melpa.org/#/edit-server][edit-server]]
server that responds to edit requests from Chrome
#+begin_src emacs-lisp
  (use-package edit-server
    :ensure t
    :config
    (edit-server-start))
#+end_src
** garbage collector
copied from [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][How does doom start up so quickly]] and [[https://github.com/MatthewZMD/.emacs.d#garbage-collection][this config]]


If you experience freezing, decrease this amount, if you increase stuttering, increase this amount.
#+begin_src emacs-lisp
  (defvar better-gc-cons-threshold 16777216 ; 16mb
    "The default value to use for `gc-cons-threshold'.
  If you experience freezing, decrease this.  If you experience stuttering, increase this.")

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold better-gc-cons-threshold
                    gc-cons-percentage 0.1)))
#+end_src

Garbage Collect when Emacs is out of focus and avoid garbage collection when using minibuffer.
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (if (boundp 'after-focus-change-function)
                  (add-function :after after-focus-change-function
                                (lambda ()
                                  (unless (frame-focus-state)
                                    (garbage-collect))))
                (add-hook 'after-focus-change-function 'garbage-collect))
              (defun gc-minibuffer-setup-hook ()
                (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

              (defun gc-minibuffer-exit-hook ()
                (garbage-collect)
                (setq gc-cons-threshold better-gc-cons-threshold))

              (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
              (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
#+end_src
